/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.reportstab;

import com.msr.reportsdao.*;
import com.msr.tools.UI.AddBankPanel;
import com.msr.util.SingletonClass;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author piyush
 * @Since march 06, 2013
 * @version V1.0
 */
public class ViewReportsFrame extends javax.swing.JFrame {

    private String SelectedValue;
    private String email;
    List<MeetingDetailBean> meetingList = null;
    List<QueryDetailBean> queryList = null;
    List<RMTransactionBean> rmTxList = null;
    List<BankTransactionBean> bankTxList = null;
    List<HistoryBean> historyList = null;
    File dir = null;
    /**
     * Creates new form ViewReportsFrame
     */
    public ViewReportsFrame(String SelectedValue, String email,HashMap<String, String> map) {
        this.SelectedValue = SelectedValue;
        this.email = email;
        initComponents();
        
        if(SelectedValue.equals("meeting")){
            
            meetingList = new ParserCaller().getMeetingListFromXML(email, map);
            System.out.println("meeting list size is "+meetingList.size());
            reportsPanel.removeAll();
            MeetingReportPanel meetingPanel = new MeetingReportPanel(email,meetingList);
            meetingPanel.setSize((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-65,(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 330);
            reportsPanel.add(meetingPanel);
            reportsPanel.repaint();
        } else if(SelectedValue.equals("query")){
            
            queryList = new ParserCaller().getQueryListFromXML(email, map);
            System.out.println("query list size is "+queryList.size());
            reportsPanel.removeAll();
            QueryReportsPanel queryPanel = new QueryReportsPanel(email,queryList);
            queryPanel.setSize((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-65,(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 330);
            reportsPanel.add(queryPanel);
            reportsPanel.repaint();
        } else if(SelectedValue.equals("history")){
            
            historyList = new ParserCaller().getHistoryListFromXML(email, map);
            System.out.println("query list size is "+historyList.size());
            reportsPanel.removeAll();
            HistoryReportPanel queryPanel = new HistoryReportPanel(email,historyList);
            queryPanel.setSize((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-65,(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 330);
            reportsPanel.add(queryPanel);
            reportsPanel.repaint();
        } else{
            if(SingletonClass.designation.equals("RM")){
                rmTxList = new ParserCaller().getRmTxListFromXML(email, map);
                     System.out.println("RM tx list size is "+rmTxList.size());
            reportsPanel.removeAll();
            RmTransactionPanel rmtxPanel = new RmTransactionPanel(email,rmTxList);
            rmtxPanel.setSize((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-65,(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 330);
            reportsPanel.add(rmtxPanel);
            reportsPanel.repaint();
            } else{
                bankTxList = new ParserCaller().getBankTxListFromXML(email, map);
                     System.out.println("Bank tx list size is "+bankTxList.size());
            reportsPanel.removeAll();
            BankTransactionPanel banktxPanel = new BankTransactionPanel(email,bankTxList);
            banktxPanel.setSize((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-65,(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 330);
            reportsPanel.add(banktxPanel);
            reportsPanel.repaint();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outerPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        reportsPanel = new javax.swing.JPanel();
        exportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        outerPanel.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(21, 21, 142));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 42, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout reportsPanelLayout = new javax.swing.GroupLayout(reportsPanel);
        reportsPanel.setLayout(reportsPanelLayout);
        reportsPanelLayout.setHorizontalGroup(
            reportsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        reportsPanelLayout.setVerticalGroup(
            reportsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 239, Short.MAX_VALUE)
        );

        exportButton.setBackground(new java.awt.Color(0, 103, 204));
        exportButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exportButton.setForeground(new java.awt.Color(255, 255, 255));
        exportButton.setText("Export Report");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outerPanelLayout = new javax.swing.GroupLayout(outerPanel);
        outerPanel.setLayout(outerPanelLayout);
        outerPanelLayout.setHorizontalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reportsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(outerPanelLayout.createSequentialGroup()
                        .addGap(0, 479, Short.MAX_VALUE)
                        .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        outerPanelLayout.setVerticalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        JFileChooser filechooser = new JFileChooser();
        filechooser.setCurrentDirectory(dir);
	  int status = filechooser.showSaveDialog(this);
//	  filechooser.setFileFilter(new TypeOfFile());
//	   filechooser.setAcceptAllFileFilterUsed(false);
            dir = filechooser.getCurrentDirectory();
	   if(status==filechooser.CANCEL_OPTION){
		   this.setCursor(Cursor.getDefaultCursor());
	   }else{
               this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = filechooser.getSelectedFile();
	    String path=file.getPath();
           if(SelectedValue.equals("meeting")){
             new MeetingReportExcel(path+".xlsx", meetingList);
             } else if(SelectedValue.equals("query")){
               new QueryReportExcel(path+".xlsx", queryList); 
             } else{
                 if(SingletonClass.designation.equals("RM")){
                     new RmTxExcel(path+".xlsx",rmTxList);
                 }else{
                     new BankTxExcel(path+".xlsx", bankTxList);
                 }
             }
           JOptionPane.showMessageDialog(null, "File Successfully Saved");
           }
        
        
        
        
       
        
        
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_exportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewReportsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewReportsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewReportsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewReportsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                HashMap<String, String> map = null;
                new ViewReportsFrame("","", map).setVisible(true);
            }
        });
    }
    
     class TypeOfFile extends FileFilter  
    {  
     //Type of file that should be display in JFileChooser will be set here  
     //We choose to display only directory and text file  
     public boolean accept(File f)  
     {  
      return f.isDirectory()||f.getName().toLowerCase().endsWith(".xls");  
     }

	@Override
	public String getDescription() {
		// TODO Auto-generated method stub
		return ".xlsx";
	}
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JPanel reportsPanel;
    // End of variables declaration//GEN-END:variables
}
