/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.tools.UI;

import com.msr.ftp.impl.DownloadUploadFile;
import com.msr.util.SingletonClass;
import com.msr.util.callServerUrl;
import com.parser.DocumentsDetailBean;
import com.parser.UserXMLReader;
import java.awt.Cursor;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.plaf.metal.MetalIconFactory;
import javax.swing.tree.*;

/**
 *
 * @author Piyush chawla
 * @since april 18, 2013
 * @version V1.0
 */
public class DocLocationFrame extends javax.swing.JFrame {
DefaultMutableTreeNode root = null;
    String email = null;
     int row = 0;
     int col = 0;
     EditBankPanel edPanel = null;
     AddBankPanel addPanel = null;
     TreePath tp = null;
     String directoryName = null;
     ViewBankPanel vbPanel = null;
    /**
     * Creates new form DocLocationFrame
     * @param addPanel 
     * @param edPanel 
     * @param vbPanel 
     * @param row 
     * @param col 
     * @param email 
     * @param value 
     */
    public DocLocationFrame(String email, int row,int col, EditBankPanel edPanel, AddBankPanel addPanel,ViewBankPanel vbPanel, String value) {
        this.email = email;
        this.row = row;
        this.col = col;
        this.edPanel = edPanel;
        this.addPanel = addPanel;
        this.vbPanel = null;
        initComponents();
        getNodeIcon();
        searchSelectedNode(value);
        if(vbPanel!=null){
            selectionButton.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        root = new DefaultMutableTreeNode("client-name");
        directoryTree = new javax.swing.JTree(root);
        selectionButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addDirectoryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(21, 21, 142));

        directoryTree = getInitialtree(directoryTree);
        directoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                directoryTreeMouseClicked(evt);
            }
        });
        directoryTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                directoryTreeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(directoryTree);

        selectionButton.setText("Select Directory");
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addDirectoryButton.setText("Add Directory");
        addDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirectoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addDirectoryButton)
                .addGap(18, 18, 18)
                .addComponent(selectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(selectionButton)
                    .addComponent(addDirectoryButton))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 // this method sets leaf node icon to be folder
    public void getNodeIcon(){
        DefaultTreeCellRenderer dr = new DefaultTreeCellRenderer();
    dr.setLeafIcon(MetalIconFactory.getTreeFolderIcon());
             directoryTree.setCellRenderer(dr);
        
    }
    
  //    it is used to search selected node in a tree... and to highlight it
  public void searchSelectedNode(String value){
        if(value!=null&& !value.equalsIgnoreCase("")){
        DefaultMutableTreeNode node = null;
         DefaultTreeModel tmodel = (DefaultTreeModel) directoryTree.getModel();
          DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) tmodel.getRoot();
           Enumeration e = m_rootNode.breadthFirstEnumeration();
           while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode)e.nextElement();
            if(node.toString().equalsIgnoreCase(value)){
            tp = new TreePath(tmodel.getPathToRoot(node));
            directoryTree.setSelectionPath(tp);
            directoryName = node.toString();
            break;
            }
        }
        }
    }
    
//    this one will create an initial tree structure where nodes comes from databse
     private JTree getInitialTreeStructure(JTree jSampleTree, List<String> pathList){
     JTree tree = jSampleTree;

        int count = 1;

        if(pathList!=null){
        for(String path:pathList){
            if(!path.contains("benf-name")){
             path = path.replaceAll("_", " ");
            count++;
            tree = matchTreeNodes(tree,path);
            }
        }
        }
        return tree;
    }
 //    this will call getinitialtreestructure method to create tree
    public JTree getInitialtree(JTree tree){
        List<String> pathList = new UserXMLReader().getDocPathList(email);
        JTree iTree = tree;
        iTree = getInitialTreeStructure(iTree, pathList);
         return iTree;
    }
       
        
    private JTree matchTreeNodes(JTree jSampleTree,String path){
        DefaultTreeModel df = (DefaultTreeModel) jSampleTree.getModel();

        if(path.startsWith("/"))
        path = path.replaceFirst("/", "");
        
        String[] strArr = path.split("/");
        String tempPath = "";
        
        for(int i = 1;i<strArr.length;i++){
        String nodeValues1=strArr[i];
         String nodeValuesParent=strArr[i-1];
          tempPath += "/"+nodeValuesParent;
         String parentParentNode = null;
         if(i==1){
             parentParentNode = null;
         }
            jSampleTree = searchNode(jSampleTree, df,nodeValuesParent, tempPath, nodeValues1);
          df.reload(root);
        }    return jSampleTree;
    
    }
          
    private boolean noSiblings(DefaultMutableTreeNode parentNode ,String newNode){
     boolean isNosibling=false;
         if( parentNode!=null)
        {
             for(int count=0;count<parentNode.getChildCount();count++)
             {
                if(parentNode.getChildAt(count).toString().equalsIgnoreCase(newNode))
                 isNosibling=true;
             }
         }
     return isNosibling;
    } 
    
    
  public JTree searchNode(JTree jSampleTree,DefaultTreeModel model, String parentNode, String dbPath,String newNode) {
    DefaultMutableTreeNode node = null;
    DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) model.getRoot();
    Enumeration e = m_rootNode.breadthFirstEnumeration();
    while (e.hasMoreElements()) {
      node = (DefaultMutableTreeNode) e.nextElement();
      if (parentNode.equalsIgnoreCase(node.toString()) && !noSiblings(node,newNode)) {
          TreePath tpath = new TreePath(model.getPathToRoot(node));
           String str = "";
        Object[] o = tpath.getPath();
        for(Object obj:o){
            str += "/"+obj.toString();
        }
        if(dbPath.equalsIgnoreCase(str)){
          if(node.getChildCount()>0){            
          for(int i = 0;i<node.getChildCount();i++){
              if(!newNode.equalsIgnoreCase(node.getChildAt(i).toString())){
            model.insertNodeInto(new DefaultMutableTreeNode(newNode), node, node.getChildCount());
        }
        model.reload(node);
        return jSampleTree;               
              }
          }else{
               model.insertNodeInto(new DefaultMutableTreeNode(newNode), node, node.getChildCount());
               model.reload(node);
        return jSampleTree;  
          }
        }
      }
    }
    return jSampleTree;
  }
    
    
    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
        // TODO add your handling code here:
        if(directoryName!=null){
        if(edPanel!=null){
            this.dispose();
            edPanel.getDocLocation(directoryName, row, col);
            edPanel.setCursor(Cursor.getDefaultCursor());
        }else if(addPanel!=null){
            this.dispose();
            addPanel.getDocLocation(directoryName, row, col);
            addPanel.setCursor(Cursor.getDefaultCursor());
        }
        }else{
            JOptionPane.showMessageDialog(this, "Please select directory.","Select Directory",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectionButtonActionPerformed

    
     
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void directoryTreeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_directoryTreeKeyReleased
        // TODO add your handling code here:
          tp = directoryTree.getSelectionPath();
        if (tp != null)
        {
         MutableTreeNode node = (MutableTreeNode) tp.getLastPathComponent();
        directoryName = node.toString();
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_directoryTreeKeyReleased
    String tempPath = null;

    private void directoryTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directoryTreeMouseClicked
        // TODO add your handling code here:
          tp = directoryTree.getPathForLocation(evt.getX(), evt.getY());
        if (tp != null)
        {
        MutableTreeNode node = (MutableTreeNode) tp.getLastPathComponent();
        directoryName = node.toString();
           String[] arr = tp.toString().substring(tp.toString().indexOf("[") + 1, tp.toString().indexOf("]")).split(",");
          tempPath = SingletonClass.serverClientDocPath.substring(0, SingletonClass.serverClientDocPath.length() - 1);
            for (String nodeStr : arr) {
                     tempPath += "/" + nodeStr.trim().replaceAll(" ", "_");
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_directoryTreeMouseClicked

    private void addDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDirectoryButtonActionPerformed
               // TODO add your handling code here:
        
        if (tempPath != null && tp != null) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
               String directoryName = JOptionPane.showInputDialog(this, "Please Provide Directory Name", "Add Directory", JOptionPane.DEFAULT_OPTION);
                if (directoryName != null && !"".equals(directoryName)) {
                    boolean flag = true;
                    tempPath = tempPath.replaceAll(" ", "_");

//                Object o = tp.getLastPathComponent();
                    MutableTreeNode node = (MutableTreeNode) tp.getLastPathComponent();
                    System.out.println("node child is" + node.getChildCount());
                    if (node.getChildCount() > 0) {
                        for (int i = 0; i < node.getChildCount(); i++) {
                            if (directoryName.equalsIgnoreCase(node.getChildAt(i).toString())) {
                                flag = false;
                                break;
                            }
                        }
                    }
                    if (flag) {
                        directoryName = directoryName.replaceAll(" ", "_");
                        boolean iscreated = new DownloadUploadFile().makeDir(tempPath, directoryName);
                        if (iscreated) {
                         String parentName = tempPath.substring(tempPath.lastIndexOf("/")+1).replaceAll("_", " ");
                         directoryName = directoryName.replaceAll("_", " ");
//                         ===================

                         
        StringBuffer buffer = new StringBuffer(SingletonClass.httpServerUrl).append(SingletonClass.operaionType).append("=locationNewDir&email=")
                .append(URLEncoder.encode(email)).append("&parent=").append(URLEncoder.encode(parentName))
                .append("&dirName=").append(directoryName);
        String url = buffer.toString();
        url = url.replace(" ", "%20");
        System.out.println("url is " + url);
        String urlStatus = new callServerUrl().urlProcessiong(url);
                         
                         
                            DefaultTreeModel tm = (DefaultTreeModel) directoryTree.getModel();
                            MutableTreeNode newNode = new DefaultMutableTreeNode(directoryName);
                            tm.insertNodeInto(newNode, node, node.getChildCount());
                            directoryTree.expandPath(tp);
                        } else {
                            JOptionPane.showMessageDialog(this, "Error in your network Connection. Please try again later", "Add Directory", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Directory Already Exist", "Add Directory", JOptionPane.WARNING_MESSAGE);
                    }
                }
           
        } else {
            JOptionPane.showMessageDialog(this, "Please select location to create New directory", "Add Directory", JOptionPane.WARNING_MESSAGE);
        }
        tp = null;
        tempPath = null;
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_addDirectoryButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDirectoryButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTree directoryTree;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton selectionButton;
    // End of variables declaration//GEN-END:variables
}
