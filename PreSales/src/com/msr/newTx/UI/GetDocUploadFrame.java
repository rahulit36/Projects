/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.newTx.UI;

import com.msr.ftp.impl.DownloadUploadFile;
import com.msr.util.SingletonClass;
import com.msr.util.callServerUrl;
import com.parser.DocumentsDetailBean;
import java.awt.Cursor;
import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Piyush Chawla
 * @since april 17,2013
 * @version V1.0
 */
public class GetDocUploadFrame extends javax.swing.JFrame {

    File dir = null;
    ClientDocFrame clientDocFrame = null;
    String clientName = null;
    String email = null;
    String ftpPath = null;
    HashMap<String, DocumentsDetailBean> docMap = null;
    TreePath tp = null;
    MutableTreeNode node = null;
    List<String> benList = null;
    NewTxPanel newTxPanel = null;

    /**
     * Creates new form GetDocUploadFrame
     * @param cdFrame 
     * @param clientName 
     * @param email 
     * @param ftpPath 
     * @param docMap 
     * @param tp 
     * @param node 
     * @param benList 
     * @param newTxPanel 
     */
    public GetDocUploadFrame(ClientDocFrame cdFrame, String clientName, String email, String ftpPath, 
            HashMap<String, DocumentsDetailBean> docMap, TreePath tp, MutableTreeNode node, List<String> benList, NewTxPanel newTxPanel) {
        this.clientDocFrame = cdFrame;
        this.clientName = clientName;
        this.newTxPanel = newTxPanel;
        this.ftpPath = ftpPath;
        System.out.println("ftp path is " + ftpPath);
        this.docMap = docMap;
        this.tp = tp;
        this.node = node;
        this.benList = benList;
        this.email = email;
        initComponents();
        statusType.addItem("Not Required");
        statusType.addItem("Pending");
        statusType.addItem("Received");
        statusType.addItem("Verified");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        filePathTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CategoryLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        categoryCombo = new javax.swing.JComboBox();
        statusType = new javax.swing.JComboBox();
        closeButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(12, 60, 111));

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filePathTextField)
                .addGap(18, 18, 18)
                .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("FileName:");

        CategoryLabel.setText("Type:");

        jLabel3.setText("Status:");

        categoryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "","Required", "Optional" }));

        statusType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryCombo, 0, 281, Short.MAX_VALUE)
                            .addComponent(fileNameTextField)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CategoryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(statusType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(uploadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser filechooser = new JFileChooser();
        filechooser.setCurrentDirectory(dir);
        int status = filechooser.showDialog(filechooser, "Upload");
        dir = filechooser.getCurrentDirectory();
        if (status == filechooser.CANCEL_OPTION) {
        } else {
            File file = filechooser.getSelectedFile();
            String path = file.getPath();
            filePathTextField.setText(path);

        }
    }//GEN-LAST:event_browseButtonActionPerformed

    /*
     * this will upload document on ftp seerver and save its 
     * name
     * ftpPath
     * type
     * Status in Database and Update Manage documents tree regarding client
     */
    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (!filePathTextField.getText().equalsIgnoreCase("") && filePathTextField != null) {
            if (!fileNameTextField.getText().equalsIgnoreCase("") && fileNameTextField != null) {
                try {


                    String path = filePathTextField.getText();
                    boolean flag = false;
                    int checkInt = 5;
                    String ext = path.substring(path.lastIndexOf("."));
                    String docServerPath = ftpPath + "/" + fileNameTextField.getText().replace(" ", "_") + ext;
                    if (docMap.containsKey(docServerPath)) {
                        checkInt = JOptionPane.showConfirmDialog(null, "document with file name " + fileNameTextField.getText() + " Already Exist. Do you wants To Replace.", "Add Document", JOptionPane.YES_NO_OPTION);
                    } else {
                        flag = true;
                    }
                    if (flag || checkInt == JOptionPane.YES_OPTION) {
                        boolean isUploaded = new DownloadUploadFile().setUploadFTPFile(ftpPath, "", path, fileNameTextField.getText().replaceAll(" ", "_") + ext);
                       if (isUploaded) {
                            String beneficiary = "";
                            for (int i = 0; i < benList.size(); i++) {
                                if (docServerPath.contains(benList.get(i).replaceAll(" ", "_")) && !clientName.equalsIgnoreCase(benList.get(i))) {
                                    beneficiary = benList.get(i);
                                    break;
                                }
                            }
                            System.out.println("doc path is " + docServerPath);
                            StringBuffer buffer = new StringBuffer(SingletonClass.httpServerUrl)
                                    .append(SingletonClass.userName).append("=").append(email)
                                    .append("&").append(SingletonClass.operaionType).append("=").append("saveClientDocs")
                                    .append("&").append(SingletonClass.clientIsBenOrApp).append("=").append(URLEncoder.encode(clientName))
                                    .append("&").append(SingletonClass.docsName).append("=").append(URLEncoder.encode(fileNameTextField.getText()))
                                    .append("&").append(SingletonClass.docsPath).append("=").append(URLEncoder.encode(docServerPath))
                                    .append("&").append("status").append("=").append(statusType.getSelectedItem().toString())
                                    .append("&").append(SingletonClass.benNmae).append("=").append(URLEncoder.encode(beneficiary))
                                    .append("&").append(SingletonClass.docsType).append("=").append(categoryCombo.getSelectedItem().toString())
                                    .append("&").append(SingletonClass.txNo).append("=").append(SingletonClass.txIdEdit)
                                    .append("&dirName=").append(node.toString());
                            String url1 = buffer.toString();
                            String encodedUrl = url1.replace(" ", "%20");
                            System.out.println("doc upload url is " + encodedUrl);
                            String urlStatus1 = new callServerUrl().urlProcessiong(encodedUrl);
                            if (urlStatus1.equalsIgnoreCase("valid")) {

                                DocumentsDetailBean newDocBean = new DocumentsDetailBean();
                                newDocBean.setClientName(clientName);
                                newDocBean.setDocName(fileNameTextField.getText());
                                newDocBean.setDocFTPPath(docServerPath);
                                newDocBean.setDocType(categoryCombo.getSelectedItem().toString());
                                newDocBean.setStatus(statusType.getSelectedItem().toString());
                                newDocBean.setBenName(beneficiary);
                                clientDocFrame.docMap.put(docServerPath, newDocBean);

                                JOptionPane.showMessageDialog(this, "File uploaded successfully.", "Add Document", JOptionPane.INFORMATION_MESSAGE);
                                this.setCursor(Cursor.getDefaultCursor());
                                this.dispose();
                                if (flag) {
                                    clientDocFrame.insertNewNode(fileNameTextField.getText() + ext, tp, node);
                                    SingletonClass.isSave = true;
                                    SingletonClass.nextOpenAccordion = "Document List";
                                    newTxPanel.refreshScreen(new JPanel());
                                    newTxPanel.repaint();
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Error in uploading " + fileNameTextField.getText() + " document", "Add Document", JOptionPane.WARNING_MESSAGE);
                                this.setCursor(Cursor.getDefaultCursor());
                            }


                        } else {
                            JOptionPane.showMessageDialog(null, "Error in your network Connection. Please try again later", "Add Document", JOptionPane.WARNING_MESSAGE);
                            this.setCursor(Cursor.getDefaultCursor());

                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error in your network Connection. Please try again later", "Add Document", JOptionPane.WARNING_MESSAGE);
                    this.setCursor(Cursor.getDefaultCursor());

                }

            } else {
                JOptionPane.showMessageDialog(null, "Please Provide document Name", "Add Document", JOptionPane.WARNING_MESSAGE);
                this.setCursor(Cursor.getDefaultCursor());

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Document to be Uploaded.", "Add Document", JOptionPane.WARNING_MESSAGE);
            this.setCursor(Cursor.getDefaultCursor());

        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }//GEN-LAST:event_uploadButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CategoryLabel;
    private javax.swing.JButton browseButton;
    private javax.swing.JComboBox categoryCombo;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox statusType;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables
}
