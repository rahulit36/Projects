/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.newTx.UI;

import com.msr.util.SingletonClass;
import com.msr.util.callServerUrl;
import com.parser.DocumentsDetailBean;
import com.parser.UserXMLReader;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author root
 */
public class CreateListFrame extends javax.swing.JFrame {

    List<String> docPathList = null;
    int counter = 0;
    String email = "";
    NewTxPanel newTxPanel = null;

    /**
     * Creates new form CreateListFrame
     */
    public CreateListFrame(String email, NewTxPanel newTxPanel) {
        this.newTxPanel = newTxPanel;
        initComponents();


        // set the delete button
        TableColumn hiddenColumn3 = allBankDocsListTable.getColumnModel().getColumn(3);
        hiddenColumn3.setWidth(0);
        hiddenColumn3.setMinWidth(0);
        hiddenColumn3.setMaxWidth(0);
// set the delete button
        TableColumn hiddenColumn4 = allBankDocsListTable.getColumnModel().getColumn(4);
        hiddenColumn4.setWidth(0);
        hiddenColumn4.setMinWidth(0);
        hiddenColumn4.setMaxWidth(0);
// set the delete button
        TableColumn hiddenColumn5 = allBankDocsListTable.getColumnModel().getColumn(5);
        hiddenColumn5.setWidth(0);
        hiddenColumn5.setMinWidth(0);
        hiddenColumn5.setMaxWidth(0);


// set the width of serial no. column
        TableColumn col0 = allBankDocsListTable.getColumnModel().getColumn(0);
        col0.setMaxWidth(100);

        JCheckBox checkBox = new javax.swing.JCheckBox();
        checkBox.setHorizontalAlignment(SwingConstants.CENTER);
        allBankDocsListTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(checkBox));
        allBankDocsListTable.getColumnModel().getColumn(2).setCellRenderer(new CheckBoxRenderer());

        List<DocumentsDetailBean> docList = new UserXMLReader().getClientDocDataList(email, SingletonClass.clientCompanyName);
        if (docList.size() > 0) {
            Map<String, DocumentsDetailBean> docMap = new HashMap<String, DocumentsDetailBean>();
            DefaultTableModel tableModel = (DefaultTableModel) allBankDocsListTable.getModel();
            docPathList = new ArrayList<String>();
            Iterator itr = docList.iterator();
            while (itr.hasNext()) {
                DocumentsDetailBean docBean = (DocumentsDetailBean) itr.next();
                if (docBean.getDocName().contains("FSA") || docBean.getDocName().contains("Company Profile") || docBean.getDocName().contains("service_Agreement")) {
                } else {
                    tableModel.insertRow(counter, new Object[]{});
                    allBankDocsListTable.setValueAt(counter + 1, counter, 0);
                    allBankDocsListTable.setValueAt(docBean.getDocName(), counter, 1);

                    allBankDocsListTable.setValueAt(docBean.getDocType(), counter, 3);
                    allBankDocsListTable.setValueAt(docBean.getDocFTPPath(), counter, 4);
                    allBankDocsListTable.setValueAt(docBean.getStatus(), counter, 5);
                    counter++;
                }
            }
            allBankDocsListTable.validate();
            allBankDocsListTable.repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allBankDocsListTable = new javax.swing.JTable();
        createListButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        JTableHeader header = allBankDocsListTable.getTableHeader();
        header.setBackground(new Color(192, 191, 200));
        header.setPreferredSize(new Dimension(600,35));
        Font font = new Font("Serif", Font.BOLD, 14);
        header.setForeground(new Color(0, 103, 204));

        header.setFont(font);
        allBankDocsListTable.setRowHeight(30);
        allBankDocsListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] {
                "S.No.", "Document Name", "","","",""
            }
        ));
        // set the delete button
        TableColumn hiddenColumn3 = allBankDocsListTable.getColumnModel().getColumn(3);
        hiddenColumn3.setWidth(0);
        hiddenColumn3.setMinWidth(0);
        hiddenColumn3.setMaxWidth(0);
        // set the delete button
        TableColumn hiddenColumn4 = allBankDocsListTable.getColumnModel().getColumn(4);
        hiddenColumn4.setWidth(0);
        hiddenColumn4.setMinWidth(0);
        hiddenColumn4.setMaxWidth(0);
        // set the delete button
        TableColumn hiddenColumn5 = allBankDocsListTable.getColumnModel().getColumn(5);
        hiddenColumn5.setWidth(0);
        hiddenColumn5.setMinWidth(0);
        hiddenColumn5.setMaxWidth(0);
        jScrollPane1.setViewportView(allBankDocsListTable);

        createListButton.setText("Create List");
        createListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createListButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jLabel2.setText("Create Document List:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createListButton)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createListButtonActionPerformed

        DefaultTableModel docModel = (DefaultTableModel) allBankDocsListTable.getModel();
        int r = docModel.getRowCount();
        System.out.println("row count before click: " + r);
        if (r > 0) {
            for (int c = 0; c < r; c++) {
                if (allBankDocsListTable.getValueAt(c, 2) != null && allBankDocsListTable.getValueAt(c, 2).toString().equals("true")) {

                    StringBuffer buffer1 = new StringBuffer(SingletonClass.httpServerUrl).append(SingletonClass.operaionType).append("=saveClientDocs&")
                            .append(SingletonClass.docsName).append("=").append(URLEncoder.encode(docModel.getValueAt(c, 1).toString())).append("&")
                            .append(SingletonClass.docsType).append("=").append(docModel.getValueAt(c, 3).toString()).append("&")
                            .append(SingletonClass.docsPath).append("=").append(URLEncoder.encode((String) docModel.getValueAt(c, 4))).append("&")
                            .append(SingletonClass.clientIsBenOrApp).append("=").append(URLEncoder.encode(SingletonClass.clientCompanyName))
                            .append("&").append(SingletonClass.userName).append("=").append(email)
                            .append("&").append("status").append("=").append(docModel.getValueAt(c, 5).toString())
                            .append("&").append("docId").append("=").append("")
                            .append("&txnNo=").append(SingletonClass.txIdEdit);

                    String url1 = buffer1.toString();
                    String encodedUrl = url1.replace(" ", "%20");
                    System.out.println("doc upload url is " + encodedUrl);
                    String urlStatus1 = new callServerUrl().urlProcessiong(encodedUrl);

                    if (urlStatus1.equals("valid")) {
                        SingletonClass.isSave = true;
                        SingletonClass.nextOpenAccordion = "Document List";
                        newTxPanel.refreshScreen(new JPanel());
                        newTxPanel.repaint();
                        dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error in saving document details of " + docModel.getValueAt(c, 1).toString() + " document.", "uploading document", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_createListButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateListFrame("", null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allBankDocsListTable;
    private javax.swing.JButton createListButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
