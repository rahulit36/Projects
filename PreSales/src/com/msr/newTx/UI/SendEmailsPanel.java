/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.newTx.UI;

import com.msr.documents.ServiceAgreementPdf;
import com.msr.documents.PreliminaryOfferPdf;
import com.msr.ftp.impl.DownloadUploadFile;
import com.msr.newTx.dao.ProposalViewBean;
import com.msr.newTx.dao.SLADataBean;
import com.msr.tracking.UI.MainScreen;
import com.msr.util.SingletonClass;
import com.parser.DocumentsDetailBean;
import com.parser.ParserCaller;
import com.parser.UserXMLReader;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;

/**
 *
 * @author Rahul
 * @version 1.0
 * @since 29 jan 2013
 */
public class SendEmailsPanel extends javax.swing.JPanel {

    NewTxPanel newTxPanel = null;
    String email = "";
    List<String> path = new ArrayList<String>();
    boolean isILCBankSelected = true;
    boolean isFLCBankSelected = true;
    JTabbedPane tabbedPane = null;
    MainScreen maiScreen = null;

    /**
     * Creates new form SendEmailsPanel
     */
    public SendEmailsPanel(String email, String accName, NewTxPanel newTxPanel, JTabbedPane tabbedPane,
            MainScreen maiScreen) {
        initComponents();
        this.newTxPanel = newTxPanel;
        this.tabbedPane = tabbedPane;
        this.maiScreen = maiScreen;
        this.email = email;
        if ("Awaiting Client Approval".equalsIgnoreCase(SingletonClass.txStatusSelect)) {
//            sendPreSLACheck.setSelected(true);
            sendDocsCheck.setSelected(false);
            sendSLACheck.setSelected(false);
//            sendPreSLACheck.setEnabled(false);
        }
        if ("Awaiting Mandate".equalsIgnoreCase(SingletonClass.txStatusSelect)) {
            sendPreSLACheck.setSelected(true);
            sendSLACheck.setSelected(true);
            sendDocsCheck.setSelected(false);
            sendPreSLACheck.setEnabled(false);
            sendSLACheck.setEnabled(false);
        }
        if ("Awaiting Documents".equalsIgnoreCase(SingletonClass.txStatusSelect)) {
            sendPreSLACheck.setSelected(true);
            sendSLACheck.setSelected(true);
            sendDocsCheck.setSelected(true);
            sendPreSLACheck.setEnabled(false);
            sendSLACheck.setEnabled(false);
            sendDocsCheck.setEnabled(false);
        }
        if (SingletonClass.designation.equalsIgnoreCase("Credit Analyst") || SingletonClass.isView || "Identification Of Client".equalsIgnoreCase(SingletonClass.txStatusSelect) || "Awaiting Internal Approval".equalsIgnoreCase(SingletonClass.txStatusSelect)) {
            sendEmailButton.setEnabled(false);
            sendPreSLACheck.setEnabled(false);
            sendSLACheck.setEnabled(false);
            sendDocsCheck.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     *
     *
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        sendSLACheck = new javax.swing.JCheckBox();
        sendDocsCheck = new javax.swing.JCheckBox();
        sendPreSLACheck = new javax.swing.JCheckBox();
        sendEmailButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(215, 215, 215));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        sendSLACheck.setBackground(new java.awt.Color(215, 215, 215));
        sendSLACheck.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        sendSLACheck.setText("Send SLA");

        sendDocsCheck.setBackground(new java.awt.Color(215, 215, 215));
        sendDocsCheck.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        sendDocsCheck.setText("Send Documents");
        sendDocsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendDocsCheckActionPerformed(evt);
            }
        });

        sendPreSLACheck.setBackground(new java.awt.Color(215, 215, 215));
        sendPreSLACheck.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        sendPreSLACheck.setText("Send Preliminary SLA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(sendPreSLACheck)
                .addGap(127, 127, 127)
                .addComponent(sendSLACheck)
                .addGap(128, 128, 128)
                .addComponent(sendDocsCheck)
                .addContainerGap(380, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendSLACheck, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendDocsCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendPreSLACheck, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        sendEmailButton.setText("Send");
        sendEmailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEmailButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendEmailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendEmailButton)
                .addContainerGap(134, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    SLADataBean sLADataBeanILCOne = null;
    SLADataBean sLADataBeanFLCOne = null;

    public boolean sendILCSla(List<HashMap> ilcList) {

        boolean isNotDocs = true;
        if (sendPreSLACheck.isSelected() || sendSLACheck.isSelected() || sendDocsCheck.isSelected()) {
            if (ilcList.size() > 0) {

                Map<String, String> ilcMap = null;
                for (int listCount = 0; listCount < ilcList.size(); listCount++) {
                    ilcMap = ilcList.get(listCount);
//                    if (ilcMap.get("lcStatus").equalsIgnoreCase("A") && ilcList.size() == 1) {
//
////                        String subject = "Service Level Agreement";
//                        // add data in bean for SLA pdf
//                        SLADataBean sLADataBean = new SLADataBean();
//                        sLADataBean.setCompanyName(SingletonClass.clientCompanyName);
//                        sLADataBean.setScheduleBank(ilcMap.get("bankName"));
//                        sLADataBean.setAmntPerMnth(ilcMap.get("proposallimit"));
//                        sLADataBean.setUsance(ilcMap.get("usance"));
//                        sLADataBean.setIntRate(ilcMap.get("interestRate"));
//                        sLADataBean.setHndlingChrge(ilcMap.get("bankName"));
//                        sLADataBean.setMargin(ilcMap.get("marginDays"));
//                        sLADataBean.setOurChrge(ilcMap.get("ourCharges"));
//                        sLADataBean.setOurChrgeType(ilcMap.get("chargesType"));
//                        sLADataBean.setApprovedBankCheck("Y");
//
//                        sLADataBean.setFrgnIntRate("");
//                        sLADataBean.setProfileInfo("");
//                        sLADataBean.setSolutionInfo("");
//                        sLADataBean.setIsFlc(false);
//                        SLADataBean sLADataBeanFLC = null;
//
//                        if (sendPreSLACheck.isEnabled() || sendSLACheck.isEnabled()) {
//                            path.add(SingletonClass.sysFilePath + "Service_Agreement_" + sLADataBean.getScheduleBank() + ".pdf");
//                            new ServiceAgreementPdf(sLADataBean, sLADataBeanFLC, SingletonClass.sysFilePath + "Service_Agreement_" + sLADataBean.getScheduleBank() + ".pdf");
//                        }
//                        if (sendDocsCheck.isSelected()) {
//                            isILCBankSelected = false;
//                        }
//                        break;
//                    } else if (ilcMap.get("lcStatus").equalsIgnoreCase("Y") || (ilcList.size() == 1 && ilcMap.get("lcStatus").equalsIgnoreCase("N"))) {
                    if (ilcMap.get("lcStatus").equalsIgnoreCase("Y")  ||  ilcList.size()==1) {
//                        if (sendSLACheck.isSelected() || sendPreSLACheck.isSelected()) {
//                        String subject = "Service Level Agreement";
                            // add data in bean for SLA pdf
                            SLADataBean sLADataBean = new SLADataBean();
                            sLADataBean.setCompanyName(SingletonClass.clientCompanyName);
                            sLADataBean.setScheduleBank(ilcMap.get("bankName"));
                            sLADataBean.setAmntPerMnth(ilcMap.get("proposallimit"));
                            sLADataBean.setExpBusiness(ilcMap.get("expBusiness"));
                             sLADataBean.setClientAddrs(ilcMap.get("clientAddrs"));
                             sLADataBean.setContactPerson(ilcMap.get("contactPerson"));
                            sLADataBean.setUsance(ilcMap.get("usance"));
                            sLADataBean.setIntRate(ilcMap.get("interestRate"));
                            sLADataBean.setHndlingChrge(ilcMap.get("handlingCharges"));
                            sLADataBean.setMargin(ilcMap.get("marginDays"));
                            sLADataBean.setOurChrge(ilcMap.get("ourCharges"));
                            sLADataBean.setOurChrgeType(ilcMap.get("chargesType"));
                            sLADataBean.setApprovedBankCheck("Y");

                            sLADataBean.setFrgnIntRate("");
                            sLADataBean.setProfileInfo("");
                            sLADataBean.setSolutionInfo("");
                            sLADataBean.setIsFlc(false);

                            //SLADataBean sLADataBeanFLC = null;

//                            if (sendPreSLACheck.isEnabled() || sendSLACheck.isEnabled()) {
                                sLADataBeanILCOne = sLADataBean;
//                            }
                            isILCBankSelected = true;
                            break;

//                        }
                    } else {
                        System.out.println("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((");
                        isILCBankSelected = false;
                    }
                }
            }
        }
        return isILCBankSelected;
    }

// send the all sample docs corresponding to the bank
    public boolean sendIlcDocs(SLADataBean sLADataBean) {

        boolean isNotDocs = true;
        try {
            System.out.println("sendIlcDocs outside if****************************************"+email+" bean: "+sLADataBean);
            if (sendDocsCheck.isSelected()) {
                List<DocumentsDetailBean> docList = new UserXMLReader().getBankDocDetailsXml(email, sLADataBean.getScheduleBank());
                System.out.println("docList: " + docList.size());
                if (docList.size() > 0) {
                    Iterator it = docList.iterator();
                    while (it.hasNext()) {
                        DocumentsDetailBean docBean = (DocumentsDetailBean) it.next();
                        System.out.println("docBean.getDocFTPPath(): " + docBean.getDocFTPPath() + "/" + " docBean.getDocName(): " + docBean.getDocName());
                        boolean flag = new DownloadUploadFile().getFTPFile(docBean.getDocFTPPath(), "", SingletonClass.sysFilePath);
                        if (flag) {
                            path.add(SingletonClass.sysFilePath + docBean.getDocFTPPath().substring(docBean.getDocFTPPath().lastIndexOf("/")));

                        } else {
                            System.out.println("ILC false121212");
                            isNotDocs = false;
                        }
                    }
                } else {
                    System.out.println("ILC false555555");
                    isNotDocs = false;

                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isNotDocs;
    }

    /**
     *
     * @param flcList
     * @return
     */
    public boolean sendFLCSla(List<HashMap> flcList) {
        boolean isNotDocs = true;
        if (sendPreSLACheck.isEnabled() || sendSLACheck.isEnabled() || sendDocsCheck.isSelected()) {
            if (flcList.size() > 0) {
                Map<String, String> flcMap = null;
                for (int listCount = 0; listCount < flcList.size(); listCount++) {
                    flcMap = flcList.get(listCount);

//                    if (flcMap.get("lcStatus").equalsIgnoreCase("A") && flcList.size() == 1) {
//
////                        String subject = "Service Level Agreement";
//                        // add data in bean for SLA pdf
//                        SLADataBean sLADataBean = new SLADataBean();
//                        sLADataBean.setCompanyName(SingletonClass.clientCompanyName);
//                        sLADataBean.setScheduleBank(flcMap.get("bankName"));
//                        sLADataBean.setAmntPerMnth(flcMap.get("proposallimit"));
//                        sLADataBean.setUsance(flcMap.get("usance"));
//                        sLADataBean.setIntRate(flcMap.get("interestRate"));
//                        sLADataBean.setHndlingChrge(flcMap.get("bankName"));
//                        sLADataBean.setMargin(flcMap.get("marginDays"));
//                        sLADataBean.setOurChrge(flcMap.get("ourCharges"));
//                        sLADataBean.setOurChrgeType(flcMap.get("chargesType"));
//                        sLADataBean.setApprovedBankCheck("Y");
//
//                        sLADataBean.setFrgnIntRate("");
//                        sLADataBean.setProfileInfo("");
//                        sLADataBean.setSolutionInfo("");
//                        sLADataBean.setIsFlc(true);
//                        SLADataBean sLADataBeanILC = null;
//                        path.add(SingletonClass.sysFilePath + "Service_Agreement_" + sLADataBean.getScheduleBank() + ".pdf");
//                        new ServiceAgreementPdf(sLADataBeanILC, sLADataBean, SingletonClass.sysFilePath + "Service_Agreement_" + sLADataBean.getScheduleBank() + ".pdf");
//                        if (sendDocsCheck.isSelected()) {
//                            isFLCBankSelected = false;
//                        }
//                        break;
//                    } else if (flcMap.get("lcStatus").equalsIgnoreCase("Y") || (flcList.size() == 1 && flcMap.get("lcStatus").equalsIgnoreCase("N"))) {
                    if (flcMap.get("lcStatus").equalsIgnoreCase("Y")  ||  flcList.size()==1) {
                        if (sendSLACheck.isSelected() || sendPreSLACheck.isSelected() || sendDocsCheck.isSelected()) {
//                        String subject = "Service Level Agreement";

                            // add data in bean for SLA pdf
                            SLADataBean sLADataBean = new SLADataBean();
                            sLADataBean.setCompanyName(SingletonClass.clientCompanyName);
                            sLADataBean.setScheduleBank(flcMap.get("bankName"));
                            sLADataBean.setAmntPerMnth(flcMap.get("proposallimit"));
                            sLADataBean.setExpBusiness(flcMap.get("expBusiness"));
                            sLADataBean.setClientAddrs(flcMap.get("clientAddrs"));
                            sLADataBean.setContactPerson(flcMap.get("contactPerson"));
                            sLADataBean.setUsance(flcMap.get("usance"));
                            sLADataBean.setIntRate(flcMap.get("interestRate"));
                            sLADataBean.setHndlingChrge(flcMap.get("handlingCharges"));
                            sLADataBean.setMargin(flcMap.get("marginDays"));
                            sLADataBean.setOurChrge(flcMap.get("ourCharges"));
                            sLADataBean.setOurChrgeType(flcMap.get("chargesType"));
                            sLADataBean.setApprovedBankCheck("Y");

                            sLADataBean.setFrgnIntRate("");
                            sLADataBean.setProfileInfo("");
                            sLADataBean.setSolutionInfo("");
                            sLADataBean.setIsFlc(true);

//                            if (sendPreSLACheck.isEnabled() || sendSLACheck.isEnabled()) {
                                sLADataBeanFLCOne = sLADataBean;
//                            }
                            isNotDocs = sendFlcDocs(sLADataBean);
                            isFLCBankSelected = true;
                            break;
                        }
                    } //                    } else if (sendSLACheck.isSelected() && !sendSLACheck.isEnabled() && sendPreSLACheck.isSelected() && !sendPreSLACheck.isEnabled() && sendDocsCheck.isSelected() && sendDocsCheck.isEnabled()) {
                    //
                    //                        // add data in bean for SLA pdf
                    //                        SLADataBean sLADataBean = new SLADataBean();
                    //                        sLADataBean.setCompanyName(SingletonClass.clientCompanyName);
                    //                        sLADataBean.setScheduleBank(flcMap.get("bankName"));
                    //                        sLADataBean.setAmntPerMnth(flcMap.get("proposallimit"));
                    //                        sLADataBean.setUsance(flcMap.get("usance"));
                    //                        sLADataBean.setIntRate(flcMap.get("interestRate"));
                    //                        sLADataBean.setHndlingChrge(flcMap.get("bankName"));
                    //                        sLADataBean.setMargin(flcMap.get("marginDays"));
                    //                        sLADataBean.setOurChrge(flcMap.get("ourCharges"));
                    //                        sLADataBean.setOurChrgeType(flcMap.get("chargesType"));
                    //                        sLADataBean.setApprovedBankCheck("Y");
                    //
                    //                        sLADataBean.setFrgnIntRate("");
                    //                        sLADataBean.setProfileInfo("");
                    //                        sLADataBean.setSolutionInfo("");
                    //                        sLADataBean.setIsFlc(true);
                    //
                    //                        isNotDocs = sendFlcDocs(sLADataBean);
                    //                        isFLCBankSelected = true;
                    //                    }
                    else {
                        isFLCBankSelected = false;
                    }
                }
            }
        }
        return isNotDocs;
    }

// send the all sample docs corresponding to the bank
    public boolean sendFlcDocs(SLADataBean sLADataBean) {

        boolean isNotDocs = true;
        try {
            if (sendDocsCheck.isSelected()) {
                List<DocumentsDetailBean> docList = new UserXMLReader().getBankDocDetailsXml(email, sLADataBean.getScheduleBank());
                if (docList.size() > 0) {
                    Iterator it = docList.iterator();
                    while (it.hasNext()) {
                        DocumentsDetailBean docBean = (DocumentsDetailBean) it.next();
                        boolean flag = new DownloadUploadFile().getFTPFile(docBean.getDocFTPPath(), "", SingletonClass.sysFilePath);
                        if (flag) {
                            path.add(SingletonClass.sysFilePath + docBean.getDocFTPPath().substring(docBean.getDocFTPPath().lastIndexOf("/")));
                        } else {
                            System.out.println("flc false");
                            isNotDocs = false;
                        }
                    }
                } else {
                    System.out.println("ILC false");
                    isNotDocs = false;
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isNotDocs;
    }

    public void sendMailToClient(List<String> path) {
        Map emailMap = null;
        List<String> toPersonsList = new ArrayList<String>();
        boolean isPersons = false;
        boolean isPreSla = false;
        boolean isSLA = false;
        boolean isDocs = false;
        ParserCaller parserCaller = new ParserCaller();
        emailMap = parserCaller.parseEmailSForDocs(email, SingletonClass.txIdEdit);
        List personsList = (List) emailMap.get("listOfCPersons");
        Iterator it = personsList.iterator();
        while (it.hasNext()) {
            Map emailPrivMap = (Map) it.next();

            emailPrivMap.get("person");
            String privStr = (String) emailPrivMap.get("notifystr");
//            if ((sendSLACheck.isSelected() && !sendSLACheck.isEnabled()) && (sendPreSLACheck.isSelected() && !sendPreSLACheck.isEnabled()) && (sendDocsCheck.isSelected() && sendDocsCheck.isEnabled())) {
//                if (privStr.contains("Send Document List")) {
//                    toPersonsList.add(emailPrivMap.get("person").toString());
//                    isPersons = true;
//                }
//            } else 
            if ((sendSLACheck.isSelected() && sendSLACheck.isEnabled()) && (sendDocsCheck.isSelected() && sendDocsCheck.isEnabled())) {
                if (privStr.contains("Send SLA") && privStr.contains("Send Document List")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            } else if ((sendPreSLACheck.isSelected() && sendPreSLACheck.isEnabled()) && (sendDocsCheck.isSelected() && sendDocsCheck.isEnabled())) {
                if (privStr.contains("Send Preliminary Offer") && privStr.contains("Send Document List")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            } else if ((sendPreSLACheck.isSelected() && !sendPreSLACheck.isEnabled()) && (sendDocsCheck.isSelected() && sendDocsCheck.isEnabled())) {
                if (privStr.contains("Send Document List")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            } else if ((sendSLACheck.isSelected() && !sendSLACheck.isEnabled()) && (sendDocsCheck.isSelected() && sendDocsCheck.isEnabled())) {
                if (privStr.contains("Send Document List")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            }else if ((sendDocsCheck.isSelected() && sendDocsCheck.isEnabled())) {
                if (privStr.contains("Send Document List")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            } else if ((sendPreSLACheck.isSelected() && sendPreSLACheck.isEnabled())) {
                if (privStr.contains("Send Preliminary Offer")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            } else if ((sendSLACheck.isSelected() && sendSLACheck.isEnabled())) {
                if (privStr.contains("Send SLA")) {
                    toPersonsList.add(emailPrivMap.get("person").toString());
                    isPersons = true;
                }
            }
        }
        String subjString = "";
        if (sendPreSLACheck.isEnabled() && sendPreSLACheck.isSelected()) {
            subjString = "Preliminary Offer Letter";
        } else if (sendSLACheck.isEnabled() && sendSLACheck.isSelected()) {
            subjString = "Service Letter Agreement";
        } else if (sendDocsCheck.isEnabled() && sendDocsCheck.isSelected()) {
            subjString = "Document List";
        }


        if (sendPreSLACheck.isEnabled() && sendPreSLACheck.isSelected()) {
            isPreSla = true;
        }
        if ( sendSLACheck.isSelected()) {
            isSLA = true;
        }
        if (sendDocsCheck.isEnabled() && sendDocsCheck.isSelected()) {
            isDocs = true;
        }
//boolean isPreSla, boolean isSLA, boolean isDocs
        if (isPersons) {
            new EmailScreen2(SingletonClass.txIdEdit, subjString, newTxPanel, email, path, emailMap, toPersonsList, isPreSla, isSLA, isDocs, tabbedPane).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "client contact person does not have privileges to send these documents.", "", 0);
        }
    }

    public String sendSingleSlaPdf(List<HashMap> ilcList, List<HashMap> flcList) {
        String isNotDocs = "";
        try {

            Map<String, String> ilcMap = null;
            ilcMap = ilcList.get(0);
            // add data in bean for SLA pdf
            SLADataBean sLADataBean = new SLADataBean();
            sLADataBean.setCompanyName(SingletonClass.clientCompanyName);
            sLADataBean.setScheduleBank(ilcMap.get("bankName"));
            sLADataBean.setAmntPerMnth(ilcMap.get("proposallimit"));
            sLADataBean.setExpBusiness(ilcMap.get("expBusiness"));
            sLADataBean.setClientAddrs(ilcMap.get("clientAddrs"));
            sLADataBean.setContactPerson(ilcMap.get("contactPerson"));
            sLADataBean.setUsance(ilcMap.get("usance"));
            sLADataBean.setIntRate(ilcMap.get("interestRate"));
            sLADataBean.setHndlingChrge(ilcMap.get("handlingCharges"));
            sLADataBean.setMargin(ilcMap.get("marginDays"));
            sLADataBean.setOurChrge(ilcMap.get("ourCharges"));
            sLADataBean.setOurChrgeType(ilcMap.get("chargesType"));
            sLADataBean.setApprovedBankCheck("Y");

            sLADataBean.setFrgnIntRate("");
            sLADataBean.setProfileInfo("");
            sLADataBean.setSolutionInfo("");
            sLADataBean.setIsFlc(false);

            Map<String, String> flcMap = null;
            flcMap = flcList.get(0);
            // add data in bean for SLA pdf
            SLADataBean sLADataBeanFLC = new SLADataBean();
            sLADataBeanFLC.setCompanyName(SingletonClass.clientCompanyName);
            sLADataBeanFLC.setScheduleBank(flcMap.get("bankName"));
            sLADataBeanFLC.setAmntPerMnth(flcMap.get("proposallimit"));
            sLADataBeanFLC.setExpBusiness(flcMap.get("expBusiness"));
            sLADataBean.setClientAddrs(ilcMap.get("clientAddrs"));
            sLADataBean.setContactPerson(ilcMap.get("contactPerson"));
            sLADataBeanFLC.setUsance(flcMap.get("usance"));
            sLADataBeanFLC.setIntRate(flcMap.get("interestRate"));
            sLADataBeanFLC.setHndlingChrge(flcMap.get("handlingCharges"));
            sLADataBeanFLC.setMargin(flcMap.get("marginDays"));
            sLADataBeanFLC.setOurChrge(flcMap.get("ourCharges"));
            sLADataBeanFLC.setOurChrgeType(flcMap.get("chargesType"));
            sLADataBeanFLC.setApprovedBankCheck("Y");

            sLADataBeanFLC.setFrgnIntRate("");
            sLADataBeanFLC.setProfileInfo("");
            sLADataBeanFLC.setSolutionInfo("");
            sLADataBeanFLC.setIsFlc(true);

//            if (ilcMap.get("lcStatus").equalsIgnoreCase("Y") && flcMap.get("lcStatus").equalsIgnoreCase("Y")) {
            if((sendPreSLACheck.isEnabled() && sendPreSLACheck.isSelected())){
                path.add(SingletonClass.sysFilePath + "Offer_Letter_" + SingletonClass.clientCompanyName + ".pdf");
                new PreliminaryOfferPdf(sLADataBean, sLADataBeanFLC, SingletonClass.sysFilePath + "Offer_Letter_" + SingletonClass.clientCompanyName + ".pdf");
            }
            if((sendSLACheck.isEnabled() && sendSLACheck.isSelected())){
                path.add(SingletonClass.sysFilePath + "Service_Agreement_" + SingletonClass.clientCompanyName + ".pdf");
                new ServiceAgreementPdf(sLADataBean, sLADataBeanFLC, SingletonClass.sysFilePath + "Service_Agreement_" + SingletonClass.clientCompanyName + ".pdf");
            }
                isNotDocs = "" + sendIlcDocs(sLADataBean);
                isNotDocs = isNotDocs + "" + sendFlcDocs(sLADataBeanFLC);
                isILCBankSelected = true;
                isFLCBankSelected = true;

//            } else {
//                isILCBankSelected = false;
//                isFLCBankSelected = false;
//
//            }
        } catch (Exception ex) {
//            isBankSelected = true;
            ex.printStackTrace();
        }
        return isNotDocs;
    }
    private void sendEmailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEmailButtonActionPerformed

//            statusCombo.addItem("Awaiting Limit Setup");
//            statusCombo.addItem("Limit Sanctioned");
//            statusCombo.addItem("Portfolio Client");
//            statusCombo.addItem("Expiry Transition");
//            statusCombo.addItem("Opportunity Lost");
//            statusCombo.addItem("Awaiting Documents");
//            statusCombo.addItem("Create Limit");
        if (!SingletonClass.txStatusSelect.equalsIgnoreCase("Limit Sanctioned") && !SingletonClass.txStatusSelect.equalsIgnoreCase("Limit Sanctioned")
                && !SingletonClass.txStatusSelect.equalsIgnoreCase("Limit Sanctioned") && !SingletonClass.txStatusSelect.equalsIgnoreCase("Portfolio Client")
                && !SingletonClass.txStatusSelect.equalsIgnoreCase("Expiry Transition") && !SingletonClass.txStatusSelect.equalsIgnoreCase("Opportunity Lost")
                && !SingletonClass.txStatusSelect.equalsIgnoreCase("Awaiting Documents") && !SingletonClass.txStatusSelect.equalsIgnoreCase("Identification Of Client")
                && !SingletonClass.txStatusSelect.equalsIgnoreCase("Create Limit") && !SingletonClass.txStatusSelect.equalsIgnoreCase("Awaiting Internal Approval")) {
            try {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                List<HashMap> ilcList = null;
                List<HashMap> flcList = null;
                ParserCaller parserCaller = new ParserCaller();
                ProposalViewBean proposalViewBean = parserCaller.parseProposalDataForView(SingletonClass.httpServerUrl + SingletonClass.operaionType + "=" + "txnProposalXML" + "&" + SingletonClass.txNo + "=" + SingletonClass.txIdEdit + "&" + SingletonClass.userName + "=" + email);
                ilcList = proposalViewBean.getIlcList();
                flcList = proposalViewBean.getFlcList();

                path = null;
                path = new ArrayList();

                System.out.println("ilcList.size(): " + ilcList.size());
                System.out.println("flcList.size(): " + flcList.size());
                if (ilcList.size() > 0 || flcList.size() > 0) {

                    if (ilcList.size() == 1 && flcList.size() == 1) {
                        
                        String returnAllDoc = sendSingleSlaPdf(ilcList, flcList);

                        if (returnAllDoc.contains("false")) {
                            JOptionPane.showMessageDialog(this, "There are no required documents list added for the selected bank. Please contact your banking department regarding the same.", "", 0);
                        } else {
                            if (!sendPreSLACheck.isSelected() && !sendSLACheck.isSelected() && !sendDocsCheck.isSelected()) {
                                JOptionPane.showMessageDialog(this, "Please select document for sending.", "", 0);
                            } 
//                            else if (!sendPreSLACheck.isSelected() && !sendSLACheck.isSelected() && sendDocsCheck.isSelected()) {
//                                JOptionPane.showMessageDialog(null, "Please select Pre-SLA or SLA.", "", 0);
//                            }
                        else {
                                if (!isILCBankSelected || !isFLCBankSelected) {
                                    JOptionPane.showMessageDialog(this, "Please select banks in proposal details.", "", 0);
                                    isILCBankSelected = true;
                                    isFLCBankSelected = true;
                                } else {
                                    sendMailToClient(path);
                                }
                            }
                        }
                    } else {
                        boolean isAllDocsAddILC = sendILCSla(ilcList);
                        boolean isAllDocsAddFLC = sendFLCSla(flcList);
                        boolean allBankDocsIlc = true;
                        boolean allBankDocsFlc = true;
                        if (isAllDocsAddILC) {
                            allBankDocsIlc = sendIlcDocs(sLADataBeanILCOne);
                        }
                        if (isAllDocsAddFLC) {
                            allBankDocsFlc = sendFlcDocs(sLADataBeanFLCOne);
                        }
                        if (allBankDocsIlc && allBankDocsFlc) {
                            
            if((sendPreSLACheck.isEnabled() && sendPreSLACheck.isSelected())){
                path.add(SingletonClass.sysFilePath + "Offer_Letter_" + SingletonClass.clientCompanyName + ".pdf");
                new PreliminaryOfferPdf(sLADataBeanILCOne, sLADataBeanFLCOne, SingletonClass.sysFilePath + "Offer_Letter_" + SingletonClass.clientCompanyName + ".pdf");
            }
            if((sendSLACheck.isEnabled() && sendSLACheck.isSelected())){
                            path.add(SingletonClass.sysFilePath + "Service_Agreement_" + SingletonClass.clientCompanyName + ".pdf");
                            new ServiceAgreementPdf(sLADataBeanILCOne, sLADataBeanFLCOne, SingletonClass.sysFilePath + "Service_Agreement_" + SingletonClass.clientCompanyName + ".pdf");
            }
                        }

                        System.out.println("isAllDocsAddILC: " + isAllDocsAddILC + " isAllDocsAddFLC: " + isAllDocsAddFLC);
                        if (!allBankDocsIlc || !allBankDocsFlc) {
                            JOptionPane.showMessageDialog(this, "There are no required documents list added for the selected bank. Please contact your banking department regarding the same.", "", 0);
                        } else {
                            if (!sendPreSLACheck.isSelected() && !sendSLACheck.isSelected() && !sendDocsCheck.isSelected()) {
                                JOptionPane.showMessageDialog(this, "Please select document for sending.", "", 0);
                            } 
//                            else if (!sendPreSLACheck.isSelected() && !sendSLACheck.isSelected() && sendDocsCheck.isSelected()) {
//                                JOptionPane.showMessageDialog(null, "Please select Pre-SLA or SLA.", "", 0);
//                            } 
                            else {
                                if (!isILCBankSelected || !isFLCBankSelected) {
                                    JOptionPane.showMessageDialog(this, "Please select banks in proposal details.", "", 0);
                                    isILCBankSelected = true;
                                    isFLCBankSelected = true;
                                } else {
                                    sendMailToClient(path);
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please add banks in proposal details.", "", 0);
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception ex) {
                this.setCursor(Cursor.getDefaultCursor());
                ex.printStackTrace();
            }
        } else if (SingletonClass.txStatusSelect.equalsIgnoreCase("Identification Of Client") && SingletonClass.txStatusSelect.equalsIgnoreCase("Awaiting Internal Approval")) {

            JOptionPane.showMessageDialog(null, "Transaction is not approved.", "", 0);
        } else {
            sendPreSLACheck.setSelected(true);
            sendSLACheck.setSelected(true);
            sendDocsCheck.setSelected(true);
            sendPreSLACheck.setEnabled(false);
            sendSLACheck.setEnabled(false);
            sendDocsCheck.setEnabled(false);
            sendDocsCheck.setEnabled(false);
        }
//        newTxPanel.refreshScreen();
//        JOptionPane.showMessageDialog(null, "Email Notification sent successfully", "", 1);
    }//GEN-LAST:event_sendEmailButtonActionPerformed

    private void sendDocsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendDocsCheckActionPerformed
    }//GEN-LAST:event_sendDocsCheckActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox sendDocsCheck;
    private javax.swing.JButton sendEmailButton;
    private javax.swing.JCheckBox sendPreSLACheck;
    private javax.swing.JCheckBox sendSLACheck;
    // End of variables declaration//GEN-END:variables
}
