/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.newTx.UI;

import com.msr.tools.UI.*;
import com.msr.util.SingletonClass;
import com.parser.ParserCaller;
import java.awt.Cursor;
import java.util.Enumeration;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.plaf.metal.MetalIconFactory;
import javax.swing.tree.*;

/**
 *
 * @author piyush chawla
 * @since april19, 2013
 * @version V1.0
 */
public class ClientDocsLocationFrame extends javax.swing.JFrame {

    DefaultMutableTreeNode root = null;
    String email = null;
    int row = 0;
    int col = 0;
    DocumentListPanel edPanel = null;
    TreePath tp = null;
    String directoryName = null;
    String directoryPath = null;
    ViewBankPanel vbPanel = null;
    List<String> benList = null;
    List<String> pathList = null;

    /**
     * Creates new form DocLocationFrame
     * @param email 
     * @param row 
     * @param col 
     * @param edPanel 
     * @param value
     * @param pathList 
     */
    public ClientDocsLocationFrame(String email, int row, int col, DocumentListPanel edPanel, String value, List<String> pathList) {
        this.email = email;
        this.row = row;
        this.col = col;
        this.edPanel = edPanel;
        this.pathList = pathList;
        this.vbPanel = null;
        initComponents();
        getNodeIcon();
                System.out.println("value:?????????????????????? "+value );
//        value = value.substring(value.indexOf(SingletonClass.clientCompanyName.replaceAll(" ", "_")));
        searchSelectedNode(value);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        root = new DefaultMutableTreeNode(SingletonClass.clientCompanyName);
        directoryTree = new javax.swing.JTree(root);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(21, 21, 142));

        directoryTree = getInitialtree(directoryTree);
        directoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                directoryTreeMouseClicked(evt);
            }
        });
        directoryTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                directoryTreeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(directoryTree);

        jButton1.setText("Select Directory");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     // this method sets leaf node icon to be folder
    public void getNodeIcon() {
        DefaultTreeCellRenderer dr = new DefaultTreeCellRenderer();
        dr.setLeafIcon(MetalIconFactory.getTreeFolderIcon());
                directoryTree.setCellRenderer(dr);
    }

     //    it is used to search selected node in a tree... and to highlight it
//    public void searchSelectedNode(String value) {
//        System.out.println("vaule is "+value);
//        if (value != null && !value.equalsIgnoreCase("")) {
//          
//            DefaultMutableTreeNode node = null;
//            DefaultTreeModel tmodel = (DefaultTreeModel) directoryTree.getModel();
//            DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) tmodel.getRoot();
//            Enumeration e = m_rootNode.breadthFirstEnumeration();
//            while (e.hasMoreElements()) {
//                node = (DefaultMutableTreeNode) e.nextElement();
//                if(node.toString().equals(value)){
//                    TreePath treep = new TreePath(tmodel.getPathToRoot(node));
//                    System.out.println(",,,,,,,,,,,,,,,,,,,,,,,,"+treep);
//                     String treepath = treep.toString().replace("[", "").replace("]", "");
//                     System.out.println("node value matched "+treepath);
//                     if(!SingletonClass.clientCompanyName.equals(SingletonClass.clientBenName)){
//                         if(treepath.contains(SingletonClass.clientBenName)){
//                             System.out.println("inside matched client n ben");
//                            tp = new TreePath(tmodel.getPathToRoot(node));
//                    directoryTree.setSelectionPath(tp);
//                    directoryName = node.toString();
//                    break;
//                     }
//                     }else{
//                         System.out.println("else loop section ");
//                         String listpath = null;
//                         for(String path:pathList){
//                             String path1 = path.split(":")[0];
//                             if(path1.equals(node.toString())&& path.split(":")[2].equalsIgnoreCase("N")){
//                                 listpath = "/"+path.split(":")[1];
//                                 break;
//                             }
//                         }
//                                 String[] treepathArr = treepath.split(",");
//                String matchingPath = "";
//                for(String treeStr: treepathArr){
//                    matchingPath += "/"+treeStr.trim();
//                }
//                matchingPath = matchingPath.replaceAll(" ", "_");
//                System.out.println("matching path value is "+matchingPath+" value to match is "+listpath);
//                if (listpath !=null && matchingPath.equalsIgnoreCase(listpath)) {
//                    tp = new TreePath(tmodel.getPathToRoot(node));
//                    directoryTree.setSelectionPath(tp);
//                    directoryName = node.toString();
//                    break;
//                }
//                           
//                         
//                     }
//                     
//                }
//            }
//        }
//    }
    
    
     //    it is used to search selected node in a tree... and to highlight it
//    public void searchSelectedNode(String value) {
//        try{
//        if (value != null && !value.equalsIgnoreCase("")) {
//            DefaultMutableTreeNode node = null;
//            DefaultTreeModel tmodel = (DefaultTreeModel) directoryTree.getModel();
//            DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) tmodel.getRoot();
//            Enumeration e = m_rootNode.breadthFirstEnumeration();
//            while (e.hasMoreElements()) {
//                node = (DefaultMutableTreeNode) e.nextElement();
//                String treepath = new TreePath(tmodel.getPathToRoot(node)).toString().replace("[", "").replace("]", "");
//                String[] treepathArr = treepath.split(",");
//                String matchingPath = "";
//                for(String treeStr: treepathArr){
//                    matchingPath += "/"+treeStr.trim();
//                }
//                matchingPath = matchingPath.replaceAll(" ", "_");
//                if (matchingPath.equalsIgnoreCase(value)) {
//                    tp = new TreePath(tmodel.getPathToRoot(node));
//                    directoryTree.setSelectionPath(tp);
//                    directoryName = node.toString();
//                    break;
//                }
//            }
//        }
//        }catch(Exception ex){
//            ex.printStackTrace();;
//        }
//    } 
      public void searchSelectedNode(String value){
        if(value!=null&& !value.equalsIgnoreCase("")){
        DefaultMutableTreeNode node = null;
         DefaultTreeModel tmodel = (DefaultTreeModel) directoryTree.getModel();
          DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) tmodel.getRoot();
           Enumeration e = m_rootNode.breadthFirstEnumeration();
           while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode)e.nextElement();
            if(node.toString().equalsIgnoreCase(value)){
            tp = new TreePath(tmodel.getPathToRoot(node));
            directoryTree.setSelectionPath(tp);
            directoryName = node.toString();
            break;
            }
        }
        }
    }
    
      
      
    //    this one will create an initial tree structure where nodes comes from databse
    private JTree getInitialTreeStructure(JTree jSampleTree, List<String> pathList) {
        JTree tree = jSampleTree;
        ParserCaller parserCaller = new ParserCaller();
        int count = 1;
            benList = parserCaller.parseBenListXml(email, SingletonClass.clientCompanyName);
        if (pathList != null) {
            for (String path1 : pathList) {
       String path = path1.split(":")[1];
                if(path.contains("client-name"))
               path= path.replace("client-name", SingletonClass.clientCompanyName);
                
                if (benList.size() > 0 && path.contains("benf-name")) {
                    for (String benName : benList) {
                        path.replaceAll("benf-name", benName);
                        path = path.replaceAll("_", " ");
                        count++;
                        tree = matchTreeNodes(tree, path);
                    }
                } else {
                    if(!path.contains("benf-name")){
                    path = path.replaceAll("_", " ");
                    count++;
                    tree = matchTreeNodes(tree, path);
                    }
                }
            }
        }
        return tree;

    }
    
//    this will call getinitialtreestructure method to create tree
    public JTree getInitialtree(JTree tree) {
        JTree iTree = tree;
        iTree = getInitialTreeStructure(iTree, pathList);

        return iTree;
    }

    private JTree matchTreeNodes(JTree jSampleTree, String path) {
        DefaultTreeModel df = (DefaultTreeModel) jSampleTree.getModel();
 
        if (path.startsWith("/")) {
            path = path.replaceFirst("/", "");
        }

        String[] strArr = path.split("/");
        String tempPath = "";
        for (int i = 1; i < strArr.length; i++) {
            String nodeValues1 = strArr[i];

            String nodeValuesParent = strArr[i - 1];
            tempPath += "/" + nodeValuesParent;
            String parentParentNode = null;
            if (i == 1) {
                parentParentNode = null;

            }

            jSampleTree = searchNode(jSampleTree, df, nodeValuesParent, tempPath, nodeValues1);
            df.reload(root);
        }
        return jSampleTree;

    }

    private boolean noSiblings(DefaultMutableTreeNode parentNode, String newNode) {
        boolean isNosibling = false;
        if (parentNode != null) {
            for (int count = 0; count < parentNode.getChildCount(); count++) {
                if (parentNode.getChildAt(count).toString().equalsIgnoreCase(newNode)) {
                    isNosibling = true;
                }
            }
        }
        return isNosibling;
    }

    public JTree searchNode(JTree jSampleTree, DefaultTreeModel model, String parentNode, String dbPath, String newNode) {

        DefaultMutableTreeNode node = null;
        DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) model.getRoot();
        Enumeration e = m_rootNode.breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            if (parentNode.equalsIgnoreCase(node.toString()) && !noSiblings(node, newNode)) {
                TreePath tpath = new TreePath(model.getPathToRoot(node));
                String str = "";
                Object[] o = tpath.getPath();
                for (Object obj : o) {
                    str += "/" + obj.toString();
                }
                if (dbPath.equalsIgnoreCase(str)) {
                    if (node.getChildCount() > 0) {
                        for (int i = 0; i < node.getChildCount(); i++) {
                            if (!newNode.equalsIgnoreCase(node.getChildAt(i).toString())) {
                                model.insertNodeInto(new DefaultMutableTreeNode(newNode), node, node.getChildCount());
                            }
                            model.reload(node);
                            return jSampleTree;
                        }
                    } else {
                        model.insertNodeInto(new DefaultMutableTreeNode(newNode), node, node.getChildCount());
                        model.reload(node);
                        return jSampleTree;
                    }
                }
            }
        }
        return jSampleTree;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (directoryName != null && edPanel != null) {
            this.dispose();
            System.out.println("directoryName: "+directoryName+"   and directoryPath: "+directoryPath);
            edPanel.getDocLocation(directoryName, directoryPath, row, col);
            edPanel.setCursor(Cursor.getDefaultCursor());
        } else {
            JOptionPane.showMessageDialog(this, "Please select directory.", "Select Directory", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void directoryTreeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_directoryTreeKeyReleased
        // TODO add your handling code here:
        tp = directoryTree.getSelectionPath();
        if (tp != null) {
            MutableTreeNode node = (MutableTreeNode) tp.getLastPathComponent();
            directoryName = node.toString();
            String treepath = tp.toString().replace("[", "").replace("]", "");
                String[] treepathArr = treepath.split(",");
                String matchingPath = "";
                for(String treeStr: treepathArr){
                    matchingPath += "/"+treeStr.trim();
                }
                directoryPath = matchingPath.replaceAll(" ", "_");
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_directoryTreeKeyReleased

    private void directoryTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directoryTreeMouseClicked
        // TODO add your handling code here:
        tp = directoryTree.getPathForLocation(evt.getX(), evt.getY());
        if (tp != null) {
            MutableTreeNode node = (MutableTreeNode) tp.getLastPathComponent();
            directoryName = node.toString();
            String treepath = tp.toString().replace("[", "").replace("]", "");
                String[] treepathArr = treepath.split(",");
                String matchingPath = "";
                for(String treeStr: treepathArr){
                    matchingPath += "/"+treeStr.trim();
                }
                directoryPath = matchingPath.replaceAll(" ", "_");
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_directoryTreeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree directoryTree;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
