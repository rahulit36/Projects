/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.newTx.UI;


import com.msr.tools.UI.IconTableCellRenderer;
import com.msr.util.SingletonClass;
import com.msr.util.callServerUrl;
import com.parser.UserXMLReader;
import com.parser.commentBean;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author root
 */


class MyTableModel1 extends DefaultTableModel {
    
    public MyTableModel1() {
        super(
                new Object[][]{},
                new String[]{
            "S No.", "Commented By", "Commented On", "Comment","","",""
        });

    }

    public boolean isCellEditable(int row, int col) {
        if(col == 1){
            return false;
        }else {
            return true;
        }
        
    }
}
public class CommentsPanel extends javax.swing.JPanel {
    private int rowCount = 0;
    NewTxPanel newTxPanel = null;
    String email = "";
    JTabbedPane tabbedPane = null;
    /**
     * Creates new form CommentsPanel
     */
    
    
    
    
    public CommentsPanel(String emailStr, String accodionName, NewTxPanel homePage, JTabbedPane tabbedPane) {
        this.newTxPanel = homePage;
        this.email = emailStr;
        this.tabbedPane = tabbedPane;
        initComponents();
        
        TableColumn queryIdColumn = commentsTable.getColumnModel().getColumn(6);
        queryIdColumn.setWidth(0);
        queryIdColumn.setMaxWidth(0);
        queryIdColumn.setMinWidth(0);
        queryIdColumn.setResizable(false);
        
        
        
        List<commentBean> comentList = new UserXMLReader().getClientCommentsList(email);
        if(comentList.size()>0){
            DefaultTableModel tableModel = (DefaultTableModel) commentsTable.getModel();
            commentBean bean = null;
            Iterator itr = comentList.iterator();
            while(itr.hasNext()){
                tableModel.insertRow(rowCount, new Object[]{});
                bean = (commentBean)itr.next();
                commentsTable.setValueAt(bean.getCmntby(), rowCount, 1);
                commentsTable.setValueAt(bean.getCmnton(), rowCount, 2);
                commentsTable.setValueAt(bean.getComment(), rowCount, 3);
                commentsTable.setValueAt(bean.getCmntId(), rowCount, 6);
                rowCount++;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        commentsTable = new javax.swing.JTable();
        addCommentButton = new javax.swing.JButton();
        saveCommentsButton = new javax.swing.JButton();

        JTableHeader header = commentsTable.getTableHeader();
        header.setBackground(new Color(192, 191, 200));
        header.setPreferredSize(new Dimension(600,35));
        Font font = new Font("Serif", Font.BOLD, 14);
        header.setForeground(new Color(0, 103, 204));

        header.setFont(font);
        commentsTable.setRowHeight(30);
        commentsTable.setModel(new MyTableModel1());
        // set the minimum width  of that colum
        TableColumn serialColumn = commentsTable.getColumnModel().getColumn(0);
        serialColumn.setWidth(50);
        serialColumn.setMaxWidth(50);
        serialColumn.setMinWidth(50);
        serialColumn.setResizable(false);

        TableColumn queryIdColumn = commentsTable.getColumnModel().getColumn(6);
        queryIdColumn.setWidth(0);
        queryIdColumn.setMaxWidth(0);
        queryIdColumn.setMinWidth(0);
        queryIdColumn.setResizable(false);

        TableColumn viewColumn = commentsTable.getColumnModel().getColumn(4);
        viewColumn.setWidth(50);
        viewColumn.setMaxWidth(50);
        viewColumn.setMinWidth(50);
        viewColumn.setCellRenderer(new IconTableCellRenderer("View"));
        viewColumn.setResizable(false);

        TableColumn deleteColumn = commentsTable.getColumnModel().getColumn(5);
        deleteColumn.setWidth(50);
        deleteColumn.setMaxWidth(50);
        deleteColumn.setMinWidth(50);
        deleteColumn.setCellRenderer(new IconTableCellRenderer("Delete"));
        deleteColumn.setResizable(false);
        commentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                commentsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(commentsTable);

        addCommentButton.setText("Add Comment");
        addCommentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommentButtonActionPerformed(evt);
            }
        });

        saveCommentsButton.setText("Save");
        saveCommentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCommentsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addCommentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveCommentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveCommentsButton)
                    .addComponent(addCommentButton))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void commentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commentsTableMouseClicked


        // delete the contact row if extra added
        DefaultTableModel tableModel = (DefaultTableModel) commentsTable.getModel();
        int row = commentsTable.rowAtPoint(evt.getPoint());
        int col = commentsTable.columnAtPoint(evt.getPoint());
        if(col ==4){
         CommentPopUpFrame cp = new CommentPopUpFrame(tableModel.getValueAt(row, 1).toString(), tableModel.getValueAt(row, 3).toString());
         cp.setVisible(true);
        }else if(col ==5){
            if(tableModel.getValueAt(row, 6)==null || !tableModel.getValueAt(row, 6).toString().equals("null")||!("".equalsIgnoreCase(tableModel.getValueAt(row, 6).toString()))){
                tableModel.removeRow(row);
                rowCount--;
            }else{
                JOptionPane.showMessageDialog(null, "Comment can't be deleted");
            }
        }
       
       
    }//GEN-LAST:event_commentsTableMouseClicked

    private void addCommentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommentButtonActionPerformed

        try {
            if (SingletonClass.txIdEdit != null && !"".equals(SingletonClass.txIdEdit)) {
                 DefaultTableModel model = (DefaultTableModel) commentsTable.getModel();
                 model.insertRow(rowCount,  new Object[]{});
                 commentsTable.setValueAt(rowCount+1, rowCount, 0);
                 commentsTable.setValueAt(SingletonClass.loginUserName, rowCount, 1);
                 commentsTable.setValueAt(new SimpleDateFormat("dd-MM-yyyy").format(new Date()), rowCount, 2);
                 rowCount++;
            } else {
                JOptionPane.showMessageDialog(null, "Please select the transaction.", "", 0);
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_addCommentButtonActionPerformed

    private void saveCommentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCommentsButtonActionPerformed
        try {
            boolean flag = true;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            DefaultTableModel model = (DefaultTableModel) commentsTable.getModel();
            int r = model.getRowCount();
            for(int c=0;c<r;c++){
                if (commentsTable.getValueAt(c, 1) == null || commentsTable.getValueAt(c, 1).toString().equals("")) {
                        JOptionPane.showMessageDialog(null, "please write commented by Name", "", 0);
                        flag = false;
                        break;
                    } else if (commentsTable.getValueAt(c, 3) == null || commentsTable.getValueAt(c, 3).toString().equals("")) {
                        JOptionPane.showMessageDialog(null, "Please fill the Comment.", "", 0);
                        flag = false;
                        break;
                    }
            }
            
            
            if(flag){
                
                boolean flag2 = true;
                for(int c=0;c<r;c++){
                    if(commentsTable.getValueAt(c, 6) == null || commentsTable.getValueAt(c, 6).toString().equals("")){
                        
                   
                    StringBuffer buffer = new StringBuffer(SingletonClass.httpServerUrl).append(SingletonClass.operaionType).append("=saveComments&").append(SingletonClass.userName).append("=").append(email).append("&details=").append(URLEncoder.encode(commentsTable.getValueAt(c, 3).toString())).append("&commentBy=").append(commentsTable.getValueAt(c, 1).toString()).append("&").append(SingletonClass.txNo).append("=").append(SingletonClass.txIdEdit);
                    
                    String urlForCall = buffer.toString().replaceAll(" ", "%20");


                        callServerUrl serverUrl1 = new callServerUrl();
                        String response = serverUrl1.urlProcessiong(urlForCall);
                        if (response.equalsIgnoreCase("valid")) {
                            flag2 = true;
                        } else {
                           flag2 = false;
                           break;
                        }
                    }    
                }
                 if(flag2){
                            JOptionPane.showMessageDialog(null, "Comments saved successfully.", "", 1);
                        }else{
                         JOptionPane.showMessageDialog(null, "Problem occured! try again later.", "", 1);
                        }
            }
            this.setCursor(Cursor.getDefaultCursor());
        } catch (Exception ex) {
            ex.printStackTrace();
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_saveCommentsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCommentButton;
    private javax.swing.JTable commentsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveCommentsButton;
    // End of variables declaration//GEN-END:variables
}
