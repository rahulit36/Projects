/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msr.newTx.UI;

import com.msr.ftp.impl.DownloadUploadFile;
import com.msr.util.SingletonClass;
import com.msr.util.callServerUrl;
import com.parser.DocumentsDetailBean;
import com.parser.UserXMLReader;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.File;
import java.net.URLEncoder;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.event.TreeModelListener;
import javax.swing.plaf.metal.MetalIconFactory;
import javax.swing.tree.*;

/**
 *
 * @author Piyush Chawla
 * @since april 17,2013
 * @version V1.0
 */
public class ClientDocFrame extends javax.swing.JFrame {

    private String email = null;
    DefaultMutableTreeNode root = null;
    private String clientName = null;
    TreePath tp = null;
    String filePath = null;
    List<String> benList = null;
    HashMap<String, DocumentsDetailBean> docMap = null;
    List<String> docPathList = null;
    NewTxPanel newTxPanel = null;

    /**
     * Creates new form ClientDocFrame
     *
     * @param clientName
     * @param email
     * @param newTxPanel
     */
    public ClientDocFrame(String email, String clientName, NewTxPanel newTxPanel) {
        this.email = email;
        this.clientName = clientName;
        this.newTxPanel = newTxPanel;
        benList = new UserXMLReader().parseBenListXml(email, clientName);
        getDocumentsDetails();
        initComponents();
        statusType.addItem("Not Required");
        statusType.addItem("Pending");
        statusType.addItem("Received");
        statusType.addItem("Verified");
        requirementType.addItem("Required");
        requirementType.addItem("Optional");
        fileNameTextField.setEditable(false);


    }
// parse client docs detail xml and provide a map along with a List of paths of files for jtree

    private void getDocumentsDetails() {
        List<DocumentsDetailBean> docList = new UserXMLReader().getClientDocDataList(email, clientName);
        if (docList.size() > 0) {
            docMap = new HashMap<String, DocumentsDetailBean>();
            docPathList = new ArrayList<String>();
            Iterator itr = docList.iterator();
            while (itr.hasNext()) {
                DocumentsDetailBean docBean = (DocumentsDetailBean) itr.next();
                    docMap.put(docBean.getDocFTPPath(), docBean);
                if (SingletonClass.designation.equalsIgnoreCase("Credit Analyst") && docBean.getDocName().contains("service_Agreement")) {
                } else {
                    if (docBean.getDocFTPPath() != null) {
                        docPathList.add(docBean.getDocFTPPath().replace(SingletonClass.serverClientDocPath, "/"));
                    }
                }
            }
            System.out.println("docPathList.size(); " + docPathList.size());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        addDirectoryButton = new javax.swing.JButton();
        addFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        root = new DefaultMutableTreeNode(clientName);
        directoryTree = new javax.swing.JTree(root);
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        requirementType = new javax.swing.JComboBox();
        statusType = new javax.swing.JComboBox();
        viewFileButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(12, 60, 111));

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        addDirectoryButton.setText("Add Directory");
        addDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirectoryButtonActionPerformed(evt);
            }
        });

        addFileButton.setText("Add File");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        //getTreeNodes();
        directoryTree = getInitialtree(directoryTree);
        directoryTree = gettreeStructure(directoryTree,docPathList);
        directoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                directoryTreeMouseClicked(evt);
            }
        });
        directoryTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                directoryTreeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(directoryTree);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("File Name:");

        jLabel2.setText("Document Type:");

        jLabel3.setText("Status:");

        jLabel4.setText("View File:");

        requirementType.setModel(new javax.swing.DefaultComboBoxModel(new String[] {""}));

        statusType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

        viewFileButton.setIcon(new ImageIcon(getClass().getResource("/images/view_icon.png")));
        viewFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFileButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Save");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileNameTextField)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                .addGap(67, 67, 67)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(requirementType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusType, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(viewFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requirementType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addDirectoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(addDirectoryButton)
                    .addComponent(addFileButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    File dir = null;
    /*
     * on selecting this another window open ups in which 
     * we select file and provide its info that was required to be saved in database
     */
    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (tempPath != null && tp != null) {
            if (!docMap.containsKey(tempPath)) {
//            if (!tp.getLastPathComponent().toString().contains(".xls") && !tp.getLastPathComponent().toString().contains(".doc") && !tp.getLastPathComponent().toString().contains(".pdf")) {
                GetDocUploadFrame upFrame = new GetDocUploadFrame(this, clientName, email, tempPath, docMap, tp, (MutableTreeNode) tp.getLastPathComponent(), benList, newTxPanel);
                upFrame.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "You have selected file. file can't be added here.", "Add Document", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select Directory to Add Document", "Add Document", JOptionPane.WARNING_MESSAGE);
        }
        this.setCursor(Cursor.getDefaultCursor());
        tp = null;
        tempPath = null;
    }//GEN-LAST:event_addFileButtonActionPerformed

    /*
     *on selecting add directory button 
     * we add a new directory in the tree.
     * This directory get created on ftp on the desired location 
     */
    private void addDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDirectoryButtonActionPerformed
        // TODO add your handling code here:
        if (tempPath != null && tp != null) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (!docMap.containsKey(tempPath)) {
//            if (!tp.getLastPathComponent().toString().contains(".xls") && !tp.getLastPathComponent().toString().contains(".doc") && !tp.getLastPathComponent().toString().contains(".pdf")) {
                String directoryName = JOptionPane.showInputDialog(this, "Please Provide Directory Name", "Add Directory", JOptionPane.DEFAULT_OPTION);
                if (directoryName != null && !"".equals(directoryName)) {
                    boolean flag = true;
                    tempPath = tempPath.replaceAll(" ", "_");

//                Object o = tp.getLastPathComponent();
                    MutableTreeNode node = (MutableTreeNode) tp.getLastPathComponent();
                    System.out.println("node child is" + node.getChildCount());
                    if (node.getChildCount() > 0) {
                        for (int i = 0; i < node.getChildCount(); i++) {
                            if (directoryName.equalsIgnoreCase(node.getChildAt(i).toString())) {
                                flag = false;
                                break;
                            }
                        }
                    }
                    if (flag) {
                        directoryName = directoryName.replaceAll(" ", "_");
                        boolean iscreated = new DownloadUploadFile().makeDir(tempPath, directoryName);
                        if (iscreated) {
                            DefaultTreeModel tm = (DefaultTreeModel) directoryTree.getModel();
                            MutableTreeNode newNode = new DefaultMutableTreeNode(directoryName);
                            tm.insertNodeInto(newNode, node, node.getChildCount());
                            directoryTree.expandPath(tp);
                        } else {
                            JOptionPane.showMessageDialog(this, "Error in your network Connection. Please try again later", "Add Directory", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Directory Already Exist", "Add Directory", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "You have selected file. Directory can't be created here.", "Add Directory", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select location to create New directory", "Add Directory", JOptionPane.WARNING_MESSAGE);
        }
        tp = null;
        tempPath = null;
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_addDirectoryButtonActionPerformed
    String[] arr = null;
    DefaultMutableTreeNode tempNode = null;
    String tempPath = null;
    private void directoryTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directoryTreeMouseClicked
        // TODO add your handling code here:
        tp = directoryTree.getPathForLocation(evt.getX(), evt.getY());
        if (tp != null) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            TreeModel tm = directoryTree.getModel();
//         Object o = tp.getLastPathComponent();
            tempNode = new DefaultMutableTreeNode(tp.getLastPathComponent());
//         
            arr = tp.toString().substring(tp.toString().indexOf("[") + 1, tp.toString().indexOf("]")).split(",");

            int count = 0;
            tempPath = SingletonClass.serverClientDocPath.substring(0, SingletonClass.serverClientDocPath.length() - 1);
            for (String nodeStr : arr) {
                count++;
                tempPath += "/" + nodeStr.trim().replaceAll(" ", "_");

                if (count == arr.length && tm.isLeaf(tempNode)) {
                    if (docMap.containsKey(tempPath)) {
                        System.out.println("tempPath      is " + tempPath);
//                    if (tempNode.toString().contains(".xls") || tempNode.toString().contains(".pdf") || tempNode.toString().contains(".doc")) {
                        String docuName = tempNode.toString().substring(0, tempNode.toString().lastIndexOf("."));
                        fileNameTextField.setText(docuName);

//                    DocumentsDetailBean docBean = docMap.get(docuName);
                        DocumentsDetailBean docBean = docMap.get(tempPath);
                        requirementType.setSelectedItem(docBean.getDocType());
                        statusType.setSelectedItem(docBean.getStatus());
//                     String path = docMap.get(docuName).getDocFTPPath();

                    } else {
                        fileNameTextField.setText(null);
                        requirementType.setSelectedIndex(0);
                        statusType.setSelectedIndex(0);
                    }
                }
            }
        } else {
            tempPath = null;
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_directoryTreeMouseClicked

    /*
     * on clicking view icon in panel we can view the selected document.
     */
    private void viewFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewFileButtonActionPerformed
        // TODO add your handling code here:
        if (fileNameTextField != null && !"".equalsIgnoreCase(fileNameTextField.getText())) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//            String docPath = docMap.get(fileNameTextField.getText()).getDocFTPPath();
            String docPath = docMap.get(tempPath).getDocFTPPath();
            if (!docPath.equalsIgnoreCase("") && docPath != null) {
                try {
                    boolean flag = new DownloadUploadFile().getFTPFile(docPath, "", SingletonClass.sysFilePath);
                    Desktop d = Desktop.getDesktop();
                    if (flag) {

                        d.open(new File(SingletonClass.sysFilePath + docPath.substring(docPath.lastIndexOf("/"))));
                    }
                } catch (Exception e) {
                }
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_viewFileButtonActionPerformed

    /*
     * on clicking update we update info about the selected document.
     */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (fileNameTextField == null) {
            JOptionPane.showMessageDialog(this, "Please select Documents to Update its detail.");
        } else if (requirementType.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "please select document type");
        } else if (statusType.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "please select document Status");
        } else {
//            DocumentsDetailBean docBean = docMap.get(fileNameTextField.getText());
            DocumentsDetailBean docBean = docMap.get(tempPath);

            System.out.println("buffer: " + clientName + "  " + fileNameTextField.getText() + "  " + docBean.getBenName() + "  ");
            StringBuffer buffer = new StringBuffer(SingletonClass.httpServerUrl).append(SingletonClass.operaionType).append("=").append("saveClientDocs")
                    .append("&").append(SingletonClass.clientIsBenOrApp).append("=").append(URLEncoder.encode(clientName))
                    .append("&").append(SingletonClass.userName).append("=").append(email)
                    .append("&").append(SingletonClass.docsName).append("=").append(URLEncoder.encode(fileNameTextField.getText()))
                    .append("&").append(SingletonClass.docsPath).append("=").append(URLEncoder.encode(docBean.getDocFTPPath()))
                    .append("&").append(SingletonClass.docsType).append("=").append(requirementType.getSelectedItem())
                    .append("&").append("status").append("=").append(statusType.getSelectedItem())
                    .append("&").append(SingletonClass.benNmae).append("=").append(URLEncoder.encode(docBean.getBenName()))
                    .append("&").append(SingletonClass.txNo).append("=").append(SingletonClass.txIdEdit);

//            StringBuffer buffer = new StringBuffer(SingletonClass.httpServerUrl).append(SingletonClass.operaionType).append("=").append("").append("&").append(SingletonClass.clientIsBenOrApp).append("=").append(URLEncoder.encode(clientName)).append("&").append(SingletonClass.userName).append("=").append(email).append("&").append(SingletonClass.docsName).append("=").append(URLEncoder.encode(fileNameTextField.getText())).append("&").append(SingletonClass.docsPath).append("=").append(URLEncoder.encode(docBean.getDocFTPPath())).append("&").append(SingletonClass.docsType).append("=").append(requirementType.getSelectedItem()).append("&").append("status").append("=").append(statusType.getSelectedItem()).append("&txnNo=3");
            String url = buffer.toString().replaceAll(" ", "%20");

            String encodedUrl = url.replace(" ", "%20");
            System.out.println("doc upload url is " + encodedUrl);
            String urlStatus1 = new callServerUrl().urlProcessiong(encodedUrl);
            if (urlStatus1.equalsIgnoreCase("valid")) {



                SingletonClass.isSave = true;
                SingletonClass.nextOpenAccordion = "Document List";
                newTxPanel.refreshScreen(new JPanel());
                newTxPanel.repaint();
            }

        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_updateButtonActionPerformed

    public void insertNewNode(String docName, TreePath treep, MutableTreeNode node) {

        DefaultTreeModel tm = (DefaultTreeModel) directoryTree.getModel();
        MutableTreeNode newNode = new DefaultMutableTreeNode(docName);
        tm.insertNodeInto(newNode, node, node.getChildCount());
        directoryTree.expandPath(treep);
    }
    private void directoryTreeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_directoryTreeKeyReleased
        // TODO add your handling code here:
        tp = directoryTree.getSelectionPath();
        if (tp != null) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            TreeModel tm = directoryTree.getModel();
//         Object o = tp.getLastPathComponent();
            tempNode = new DefaultMutableTreeNode(tp.getLastPathComponent());
//         
            arr = tp.toString().substring(tp.toString().indexOf("[") + 1, tp.toString().indexOf("]")).split(",");

            int count = arr.length - 1;
            tempPath = SingletonClass.serverClientDocPath.substring(0, SingletonClass.serverClientDocPath.length() - 1);
            for (String nodeStr : arr) {
                tempPath += "/" + nodeStr.trim().replaceAll(" ", "_");
                System.out.println("tempPath is " + tempPath);
                if (tm.isLeaf(tempNode)) {
                    if (docMap.containsKey(tempPath)) {
//                    if (tempNode.toString().contains(".xls") || tempNode.toString().contains(".pdf") || tempNode.toString().contains(".doc")) {
                        String docuName = tempNode.toString().substring(0, tempNode.toString().lastIndexOf("."));
                        fileNameTextField.setText(docuName);
//                    DocumentsDetailBean docBean = docMap.get(docuName);
                        DocumentsDetailBean docBean = docMap.get(tempPath);
                        requirementType.setSelectedItem(docBean.getDocType());
                        statusType.setSelectedItem(docBean.getStatus());
//                     String path = docMap.get(docuName).getDocFTPPath();
                    } else {
                        fileNameTextField.setText(null);
                        requirementType.setSelectedIndex(0);
                        statusType.setSelectedIndex(0);
                    }
                }
            }
        } else {
            tempPath = null;
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_directoryTreeKeyReleased

//     this method genrate further tree which include files related to client................       
    private JTree gettreeStructure(JTree jSampleTree, List<String> pathList) {
        JTree tree = jSampleTree;

        int count = 1;

        if (pathList != null) {
            System.out.println("pathlist size is " + pathList.size());
            for (String path : pathList) {
                path = path.replaceAll("_", " ");
                System.out.println("\n\n\n\n\n++++" + count + "++++now path is " + path + "\n\n\n\n");
                count++;
                tree = matchTreeNodes(tree, path);
            }
        }
        return tree;

    }

    private JTree getInitialTreeStructure(JTree jSampleTree, List<String> pathList) {
        JTree tree = jSampleTree;

        int count = 1;

        if (pathList != null) {
            System.out.println("pathlist size is " + pathList.size());
            for (String path : pathList) {
                if (path.contains("client-name")) {
                    path = path.replace("client-name", clientName);
                }
                if (benList.size() > 0 && path.contains("benf-name")) {
                    for (String benName : benList) {
                        path.replaceAll("benf-name", benName);
                        path = path.replaceAll("_", " ");
                        System.out.println("\n\n\n\n\n++++" + count + "++++now path is " + path + "\n\n\n\n");
                        count++;
                        tree = matchTreeNodes(tree, path);
                    }
                } else {
                    path = path.replaceAll("_", " ");
                    System.out.println("\n\n\n\n\n++++" + count + "++++now path is " + path + "\n\n\n\n");
                    count++;
                    tree = matchTreeNodes(tree, path);
                }
            }
        }
        return tree;

    }
//    this method adds new node or use to add nodes from database list into tree.....................

    private JTree matchTreeNodes(JTree jSampleTree, String path) {
        DefaultTreeModel df = (DefaultTreeModel) jSampleTree.getModel();

        if (path.startsWith("/")) {
            path = path.replaceFirst("/", "");
        }

        String[] strArr = path.split("/");
        String tempPath = "";
        System.out.println("Aray size is " + strArr.length);
        for (int i = 1; i < strArr.length; i++) {
            String nodeValues1 = strArr[i];

            String nodeValuesParent = strArr[i - 1];
            tempPath += "/" + nodeValuesParent;
            String parentParentNode = null;
            if (i == 1) {
                parentParentNode = null;

            }

            jSampleTree = searchNode(jSampleTree, df, nodeValuesParent, tempPath, nodeValues1);
            df.reload(root);
        }
        return jSampleTree;

    }

//     this will check if sibling with a given name exist or not................
    private boolean noSiblings(DefaultMutableTreeNode parentNode, String newNode) {
        boolean isNosibling = false;
        if (parentNode != null) {
            for (int count = 0; count < parentNode.getChildCount(); count++) {
                if (parentNode.getChildAt(count).toString().equalsIgnoreCase(newNode)) {
                    isNosibling = true;
                }
            }
        }
        return isNosibling;
    }

//      this will search and add new node at its required location while generating tree..................
    public JTree searchNode(JTree jSampleTree, DefaultTreeModel model, String parentNode, String dbPath, String newNode) {


        DefaultMutableTreeNode node = null;
        DefaultMutableTreeNode m_rootNode = (DefaultMutableTreeNode) model.getRoot();
        Enumeration e = m_rootNode.breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            System.out.println("inside while of enumeration with node " + node);
//        System.out.println("parent node is "+parentNode+" node to b matched with parent is "+node.toString());
            if (parentNode.equalsIgnoreCase(node.toString()) && !noSiblings(node, newNode)) {

                TreePath tpath = new TreePath(model.getPathToRoot(node));
                String str = "";
                Object[] o = tpath.getPath();
                for (Object obj : o) {
                    str += "/" + obj.toString();
                }
                System.out.println("tpath is " + str);
                if (dbPath.equalsIgnoreCase(str)) {
                    if (node.getChildCount() > 0) {
                        for (int i = 0; i < node.getChildCount(); i++) {
                            if (!newNode.equalsIgnoreCase(node.getChildAt(i).toString())) {


                                model.insertNodeInto(new DefaultMutableTreeNode(newNode), node, node.getChildCount());
                            }
                            model.reload(node);
                            return jSampleTree;
                        }
                    } else {
                        model.insertNodeInto(new DefaultMutableTreeNode(newNode), node, node.getChildCount());
                        model.reload(node);
                        return jSampleTree;
                    }

                }
            }
        }
        return jSampleTree;
    }

//     this will create initial tree structure....................
    public void getTreeNodes() {


        DefaultMutableTreeNode clientDoc = new DefaultMutableTreeNode("Company Docs");
        DefaultMutableTreeNode compAnalysis = new DefaultMutableTreeNode("Analysis");
        DefaultMutableTreeNode compProposal = new DefaultMutableTreeNode("Proposal");
        DefaultMutableTreeNode docFinancial = new DefaultMutableTreeNode("Financial");
        DefaultMutableTreeNode docKyc = new DefaultMutableTreeNode("KYC");
        DefaultMutableTreeNode docSanction = new DefaultMutableTreeNode("Sanction");
        DefaultMutableTreeNode docSuppliers = new DefaultMutableTreeNode("Beneficiaries");
        root.add(clientDoc);
        root.add(compAnalysis);
        root.add(compProposal);
        clientDoc.add(docFinancial);
        clientDoc.add(docKyc);
        clientDoc.add(docSanction);
        clientDoc.add(docSuppliers);
        System.out.println("benList.size is " + benList.size());
        for (int i = 0; i < benList.size(); i++) {
            DefaultMutableTreeNode benName = new DefaultMutableTreeNode(benList.get(i));
            docSuppliers.add(benName);
            DefaultMutableTreeNode benDoc = new DefaultMutableTreeNode("Company Docs");
            DefaultMutableTreeNode benAnalysis = new DefaultMutableTreeNode("Analysis");
            DefaultMutableTreeNode benProposal = new DefaultMutableTreeNode("Proposal");
            benName.add(benDoc);
            benName.add(benAnalysis);
            benName.add(benProposal);
            DefaultMutableTreeNode bDocFinancial = new DefaultMutableTreeNode("Financial");
            DefaultMutableTreeNode bDocKyc = new DefaultMutableTreeNode("KYC");
            DefaultMutableTreeNode bDocSanction = new DefaultMutableTreeNode("Sanction");
            benDoc.add(bDocFinancial);
            benDoc.add(bDocKyc);
            benDoc.add(bDocSanction);

        }

    }

    public JTree getInitialtree(JTree tree) {
        List<String> pathList = new UserXMLReader().getDocPathList(email);
        JTree iTree = tree;
        iTree = getInitialTreeStructure(iTree, pathList);

        return iTree;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientDocFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientDocFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientDocFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientDocFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientDocFrame("satyendra.s@msronline.in", "KLM Airlines", null).setVisible(true);


            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDirectoryButton;
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JTree directoryTree;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox requirementType;
    private javax.swing.JComboBox statusType;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewFileButton;
    // End of variables declaration//GEN-END:variables
}
